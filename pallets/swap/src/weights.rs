
//! Autogenerated weights for `pallet_amm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-10, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// pallet_amm
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// amm_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_amm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	// Storage: Swap Pools (r:1 w:1)
	// Storage: Swap ProtocolFee (r:1 w:0)
	// Storage: Assets Asset (r:3 w:3)
	// Storage: Assets Account (r:5 w:5)
	fn add_liquidity() -> Weight {
		// Minimum execution time: 89_315 nanoseconds.
		Weight::from_ref_time(90_859_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Swap Pools (r:1 w:1)
	// Storage: Swap ProtocolFee (r:1 w:0)
	// Storage: Assets Asset (r:3 w:3)
	// Storage: Assets Account (r:5 w:5)
	fn remove_liquidity() -> Weight {
		// Minimum execution time: 97_533 nanoseconds.
		Weight::from_ref_time(98_973_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Swap Pools (r:1 w:1)
	// Storage: Assets Asset (r:3 w:3)
	// Storage: Assets Account (r:6 w:6)
	// Storage: System Account (r:2 w:2)
	// Storage: Swap ProtocolFee (r:1 w:0)
	fn create_pool() -> Weight {
		// Minimum execution time: 103_220 nanoseconds.
		Weight::from_ref_time(104_510_000)
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(12))
	}
	// Storage: Swap ProtocolFee (r:0 w:1)
	fn update_protocol_fee() -> Weight {
		// Minimum execution time: 15_088 nanoseconds.
		Weight::from_ref_time(15_562_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Swap ProtocolFeeReceiver (r:0 w:1)
	fn update_protocol_fee_receiver() -> Weight {
		// Minimum execution time: 15_336 nanoseconds.
		Weight::from_ref_time(15_887_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
