
//! Autogenerated weights for `thea_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-07, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// thea_staking
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// stake_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `thea_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> thea_staking::WeightInfo for WeightInfo<T> {
	// Storage: TheaStaking Stakinglimits (r:0 w:1)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `m` is `[100, 4294967295]`.
	fn set_staking_limits(_a: u32, _m: u32, ) -> Weight {
		// Minimum execution time: 4_802 nanoseconds.
		Weight::from_ref_time(5_196_204)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TheaStaking Candidates (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: TheaStaking CandidateToNetworkMapping (r:0 w:1)
	/// The range of component `a` is `[0, 255]`.
	/// The range of component `b` is `[0, 255]`.
	/// The range of component `m` is `[100, 4294967295]`.
	fn add_candidate(_a: u32, b: u32, _m: u32, ) -> Weight {
		// Minimum execution time: 33_787 nanoseconds.
		Weight::from_ref_time(36_942_584)
			// Standard Error: 31
			.saturating_add(Weight::from_ref_time(3_245).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: TheaStaking Stakers (r:1 w:1)
	// Storage: TheaStaking CandidateToNetworkMapping (r:1 w:0)
	// Storage: TheaStaking Candidates (r:1 w:1)
	/// The range of component `m` is `[100, 4294967295]`.
	/// The range of component `k` is `[1, 255]`.
	/// The range of component `x` is `[1, 255]`.
	fn nominate(_m: u32, _k: u32, x: u32, ) -> Weight {
		// Minimum execution time: 31_132 nanoseconds.
		Weight::from_ref_time(32_228_155)
			// Standard Error: 15
			.saturating_add(Weight::from_ref_time(192).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TheaStaking CandidateToNetworkMapping (r:1 w:0)
	// Storage: TheaStaking Stakers (r:1 w:1)
	// Storage: TheaStaking Stakinglimits (r:1 w:0)
	// Storage: TheaStaking Candidates (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `m` is `[100, 4294967295]`.
	/// The range of component `k` is `[1, 255]`.
	/// The range of component `x` is `[1, 255]`.
	fn bond(_m: u32, _k: u32, _x: u32, ) -> Weight {
		// Minimum execution time: 45_790 nanoseconds.
		Weight::from_ref_time(47_849_949)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: TheaStaking Stakers (r:1 w:1)
	// Storage: TheaStaking CandidateToNetworkMapping (r:1 w:0)
	// Storage: TheaStaking Candidates (r:1 w:1)
	// Storage: TheaStaking CurrentIndex (r:1 w:0)
	/// The range of component `m` is `[100, 4294967295]`.
	/// The range of component `k` is `[1, 255]`.
	/// The range of component `x` is `[1, 255]`.
	fn unbond(_m: u32, k: u32, _x: u32, ) -> Weight {
		// Minimum execution time: 30_368 nanoseconds.
		Weight::from_ref_time(31_478_582)
			// Standard Error: 13
			.saturating_add(Weight::from_ref_time(46).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TheaStaking Stakers (r:1 w:1)
	// Storage: TheaStaking CurrentIndex (r:1 w:0)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `m` is `[100000000, 4294967295]`.
	/// The range of component `k` is `[1, 255]`.
	/// The range of component `x` is `[1, 255]`.
	fn withdraw_unbonded(_m: u32, _k: u32, _x: u32, ) -> Weight {
		// Minimum execution time: 39_385 nanoseconds.
		Weight::from_ref_time(41_244_373)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TheaStaking Candidates (r:1 w:1)
	// Storage: TheaStaking InactiveCandidates (r:0 w:1)
	/// The range of component `m` is `[100, 4294967295]`.
	/// The range of component `k` is `[1, 255]`.
	fn remove_candidate(_m: u32, k: u32, ) -> Weight {
		// Minimum execution time: 23_099 nanoseconds.
		Weight::from_ref_time(24_101_843)
			// Standard Error: 14
			.saturating_add(Weight::from_ref_time(195).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TheaStaking ActiveNetworks (r:1 w:1)
	// Storage: Thea ActiveNetworks (r:0 w:1)
	/// The range of component `n` is `[1, 255]`.
	fn add_network(n: u32, ) -> Weight {
		// Minimum execution time: 17_969 nanoseconds.
		Weight::from_ref_time(18_729_772)
			// Standard Error: 14
			.saturating_add(Weight::from_ref_time(230).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TheaStaking ActiveNetworks (r:1 w:1)
	// Storage: Thea ActiveNetworks (r:0 w:1)
	/// The range of component `n` is `[1, 255]`.
	fn remove_network(n: u32, ) -> Weight {
		// Minimum execution time: 19_747 nanoseconds.
		Weight::from_ref_time(20_522_702)
			// Standard Error: 21
			.saturating_add(Weight::from_ref_time(313).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TheaStaking ActiveRelayers (r:1 w:0)
	// Storage: TheaStaking ReportedOffenders (r:1 w:0)
	// Storage: TheaStaking CommitedSlashing (r:1 w:1)
	/// The range of component `n` is `[1, 255]`.
	fn report_offence(_n: u32, ) -> Weight {
		// Minimum execution time: 28_467 nanoseconds.
		Weight::from_ref_time(29_373_246)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TheaStaking EraRewardPayout (r:1 w:0)
	// Storage: TheaStaking EraRewardPoints (r:1 w:0)
	// Storage: TheaStaking TotalElectedRelayers (r:1 w:0)
	/// The range of component `k` is `[1, 255]`.
	/// The range of component `m` is `[100, 4294967295]`.
	/// The range of component `x` is `[1, 255]`.
	fn stakers_payout(k: u32, _m: u32, _x: u32, ) -> Weight {
		// Minimum execution time: 26_706 nanoseconds.
		Weight::from_ref_time(27_673_709)
			// Standard Error: 12
			.saturating_add(Weight::from_ref_time(131).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(3))
	}
}
