// This file is part of Polkadex.

// Copyright (C) 2020-2022 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Benchmarking setup for pallet-ocex
#![cfg(feature = "runtime-benchmarks")]

use super::*;
use crate::{session::StakingLimits, Pallet as TheaStaking};
use frame_benchmarking::{account, benchmarks, whitelisted_caller};
use frame_support::{
	dispatch::UnfilteredDispatchable, traits::EnsureOrigin, BoundedBTreeMap, BoundedVec,
};
use frame_system::{pallet_prelude::OriginFor, RawOrigin};
use parity_scale_codec::Decode;
use polkadex_primitives::UNIT_BALANCE;
use sp_std::vec;

// Check if last event generated by pallet is the one we're expecting
fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
	frame_system::Pallet::<T>::assert_last_event(generic_event.into());
}

fn convert_to_balance<T: Config>(dec: u32) -> BalanceOf<T> {
	BalanceOf::<T>::decode(&mut &(dec as u128).saturating_mul(UNIT_BALANCE).to_le_bytes()[..])
		.unwrap()
}

fn stake_nominator_candidate<T: Config>(k: u32, m: u32) {
	let nominator: T::AccountId = whitelisted_caller();
	let candidate: T::AccountId = whitelisted_caller();
	// register stake
	let bls_key: BLSPublicKey = BLSPublicKey([k as u8; 192]);
	let balance: BalanceOf<T> = convert_to_balance::<T>(m);
	let exposure = Exposure {
		score: 1000,
		total: balance,
		individual: balance,
		bls_pub_key: bls_key,
		stakers: Default::default(),
	};
	TheaStaking::<T>::Balances::mint_into(&nominator, balance).unwrap();
	<Stakers<T>>::insert(nominator.clone());
	<Candidates<T>>::insert(1, candidate.clone(), exposure);
}

benchmarks! {
	set_staking_limits {
		let a in 1 .. 10;
		let m in 100 .. u32::MAX;
		let balance: BalanceOf<T> = convert_to_balance::<T>(m);
		let staking_limits = StakingLimits {
			mininum_relayer_stake: balance,
			minimum_nominator_stake: balance,
			maximum_nominator_per_relayer: 10,
			max_relayers: a,
		};
	}: _(RawOrigin::Root, staking_limits)

	add_canditate {
		let a in 0 .. 255;
		let b in 0 .. 255;
		let candidate: T::AccountId = whitelisted_caller();
		let bls_key = BLSPublicKey([b.try_into().unwrap(); 192]);
	}: _(RawOrigin::Signed(candidate.clone()), a, bls_key)
	verify {
		assert_last_event::<T>(Event::CandidateRegistered{candidate, stake: T::CandidateBond::get()}.into());
	}

	nominate {
		let m in 100 .. u32::MAX;
		let k in 1 .. 255;
		stake_nominator_candidate::<T>(k, m);
	}: _(RawOrigin::Signed(nominator.clone()), candidate.clone())
	verify {
		assert_last_event::<T>(Event::Nominated { candidate, nominator }.into());
	}

	bond {
		let m in 100 .. u32::MAX;
		let k in 1 .. 255;
		stake_nominator_candidate::<T>(k, m);
		TheaStaking::<T>::nominate(RawOrigin::Signed(nominator.clone(), candidate.clone())).unwrap();
	}: _(RawOrigin::Signed(nominator.clone(), balance))
	verify{
		assert_last_event::<T>(Event::Bonded{ candidate, nominator, amount }.into());
	}

	unbond {
		let m in 100 .. u32::MAX;
		let k in 1 .. 255;
		stake_nominator_candidate::<T>(k, m);
		TheaStaking::<T>::nominate(RawOrigin::Signed(nominator.clone(), candidate.clone())).unwrap();
		TheaStaking::<T>::bond(RawOrigin::Signed(nominator.clone()), balance).unwrap();
	}: _(RawOrigin::Signed(nominator.clone(), balance))
	verify {
		assert_last_event::<T>(Event::Unbonded{ candidate, nominator, amount }.into());
	}

	withdraw_unbonded {
		let m in 100 .. u32::MAX;
		let k in 1 .. 255;
		stake_nominator_candidate::<T>(k, m);
		TheaStaking::<T>::nominate(RawOrigin::Signed(nominator.clone(), candidate.clone())).unwrap();
		TheaStaking::<T>::bond(RawOrigin::Signed(nominator.clone()), balance).unwrap();
		TheaStaking::<T>::unbond(RawOrigin::Signed(nominator.clone()), balance).unwrap();
	}: _(RawOrigin::Signed(nominator.clone()))
	verify {
		assert_last_event::<T>(Event::BondsWithdrawn{ nominator, amount }.into());
	}

	remove_candidate {
		let k in 1 .. 255;
		let candidate: T::AccountId = whitelisted_caller();
		// register stake
		let bls_key: BLSPublicKey = BLSPublicKey([k as u8; 192]);
		let balance: BalanceOf<T> = convert_to_balance::<T>(m);
		let exposure = Exposure {
			score: 1000,
			total: balance,
			individual: balance,
			bls_pub_key: bls_key,
			stakers: Default::default(),
		};
		<Candidates<T>>::insert(1, candidate.clone(), exposure);
	}: _(RawOrigin::Signed(candidate.clone()), 1)
	verify {
		assert_last_event::<T>(Event::OutgoingCandidateAddet{ candidate }.into());
	}

	add_network {
		let n in 1 .. u32::MAX;
		let go = T::GovernanceOrigin::successful_origin();
	}: _(RawOrigin::Signed(go), n)
	verify {
		assert_last_event::<T>(Event::NetworkAdded{ n }.into());
	}

	remove_network {
		let n in 1 .. u32::MAX;
		let go = T::GovernanceOrigin::successful_origin();
		TheaStaking::<T>::add_network(RawOrigin::Signed(go.clone()), n).unwrap();
	}: _(RawOrigin::Signed(go), n)
	verify {
		assert_last_event::<T>(Event::NetworkRemoved{ n }.into());
	}
}

#[cfg(test)]
use frame_benchmarking::impl_benchmark_test_suite;

#[cfg(test)]
impl_benchmark_test_suite!(TheaStaking, crate::mock::new_test_ext(), crate::mock::Test);
