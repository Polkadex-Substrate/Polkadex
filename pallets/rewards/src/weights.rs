// This file is part of Polkadex.
//
// Copyright (c) 2023 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-06, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MSI`, CPU: `13th Gen Intel(R) Core(TM) i9-13980HX`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/polkadex-node
// benchmark
// pallet
// --pallet
// pallet_rewards
// --extrinsic
// *
// --steps
// 100
// --repeat
// 200
// --output
// reward_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> super::WeightInfo for WeightInfo<T> {
	// Storage: Rewards InitializeRewards (r:1 w:1)
	/// The range of component `b` is `[0, 4838400]`.
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `r` is `[0, 10]`.
	fn create_reward_cycle(_b: u32, _i: u32, _r: u32, ) -> Weight {
		// Minimum execution time: 7_804 nanoseconds.
		Weight::from_ref_time(8_582_283)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Rewards InitializeRewards (r:1 w:0)
	// Storage: Rewards Distributor (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn initialize_claim_rewards() -> Weight {
		// Minimum execution time: 44_884 nanoseconds.
		Weight::from_ref_time(46_485_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Rewards Distributor (r:1 w:1)
	// Storage: Rewards InitializeRewards (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim() -> Weight {
		// Minimum execution time: 19_224 nanoseconds.
		Weight::from_ref_time(20_249_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
