
//! Autogenerated weights for `pallet_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-06, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Nakuls-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/polkadex-node
// benchmark
// pallet
// --pallet
// pallet-rewards
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// liquidity_weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use crate::RewardsWeightInfo;

/// Weight functions for `pallet_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> RewardsWeightInfo for WeightInfo<T> {
    // Storage: Rewards InitializeRewards (r:1 w:1)
    /// The range of component `b` is `[0, 4838400]`.
    /// The range of component `i` is `[1, 100]`.
    /// The range of component `r` is `[0, 10]`.
    fn create_reward_cycle(_b: u32, _i: u32, _r: u32) -> Weight {
        (8_557_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Rewards InitializeRewards (r:1 w:0)
    // Storage: Rewards Distributor (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    // Storage: Balances Locks (r:1 w:1)
    fn initialize_claim_rewards() -> Weight {
        (25_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    // Storage: Rewards InitializeRewards (r:1 w:0)
    // Storage: Rewards Distributor (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn claim() -> Weight {
        (20_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
}
