
//! Autogenerated weights for `pallet_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-06, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// pallet_rewards
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// reward_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> super::WeightInfo for WeightInfo<T> {
	// Storage: Rewards InitializeRewards (r:1 w:1)
	/// The range of component `b` is `[0, 4838400]`.
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `r` is `[0, 10]`.
	fn create_reward_cycle(_b: u32, _i: u32, r: u32, ) -> Weight {
		// Minimum execution time: 17_230 nanoseconds.
		Weight::from_ref_time(18_287_601)
			// Standard Error: 268
			.saturating_add(Weight::from_ref_time(3_084).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Rewards InitializeRewards (r:1 w:0)
	// Storage: Rewards Distributor (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn initialize_claim_rewards() -> Weight {
		// Minimum execution time: 56_443 nanoseconds.
		Weight::from_ref_time(57_067_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Rewards Distributor (r:1 w:1)
	// Storage: Rewards InitializeRewards (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim() -> Weight {
		// Minimum execution time: 40_505 nanoseconds.
		Weight::from_ref_time(41_253_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
