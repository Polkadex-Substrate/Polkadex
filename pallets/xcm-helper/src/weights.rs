//! Autogenerated weights for `xcm_helper`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-31, STEPS: `100`, REPEAT: `150`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-41-122`, CPU: `AMD EPYC 7571`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./parachain-polkadex-node
// benchmark
// pallet
// --pallet
// xcm-helper
// --steps
// 100
// --repeat
// 150
// --extrinsic
// *
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `xcm_helper`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::XcmHelperWeightInfo for WeightInfo<T> {
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `XcmHelper::ParachainAssets` (r:1 w:1)
	/// Proof: `XcmHelper::ParachainAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmHelper::WhitelistedTokens` (r:1 w:1)
	/// Proof: `XcmHelper::WhitelistedTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 1000]`.
	/// The range of component `b` is `[1, 1000]`.
	fn whitelist_token(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3687`
		// Minimum execution time: 79_121_000 picoseconds.
		Weight::from_parts(81_357_770, 0)
			.saturating_add(Weight::from_parts(0, 3687))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `XcmHelper::ParachainAssets` (r:1 w:0)
	/// Proof: `XcmHelper::ParachainAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmHelper::WhitelistedTokens` (r:1 w:1)
	/// Proof: `XcmHelper::WhitelistedTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 1000]`.
	/// The range of component `b` is `[1, 1000]`.
	fn remove_whitelisted_token(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `225`
		//  Estimated: `3690`
		// Minimum execution time: 53_080_000 picoseconds.
		Weight::from_parts(54_785_415, 0)
			.saturating_add(Weight::from_parts(0, 3690))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 1000]`.
	/// The range of component `b` is `[1, 1000]`.
	fn transfer_fee(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226`
		//  Estimated: `6196`
		// Minimum execution time: 162_721_000 picoseconds.
		Weight::from_parts(168_625_125, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			// Standard Error: 49
			.saturating_add(Weight::from_parts(1_048, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
