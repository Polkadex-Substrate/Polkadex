//! Autogenerated weights for `thea_executor`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-05, STEPS: `100`, REPEAT: `200`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-9-163`, CPU: `AMD EPYC 7571`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// thea-executor
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// thea_executor_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `thea_executor`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::TheaExecutorWeightInfo for WeightInfo<T> {
	/// Storage: `TheaExecutor::WithdrawalFees` (r:0 w:1)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn set_withdrawal_fee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 26_650_000 picoseconds.
		Weight::from_parts(27_962_336, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(44, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TheaExecutor::Metadata` (r:0 w:1)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn update_asset_metadata(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 25_190_000 picoseconds.
		Weight::from_parts(26_376_028, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TheaExecutor::PendingWithdrawals` (r:1 w:1)
	/// Proof: `TheaExecutor::PendingWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::Metadata` (r:1 w:0)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::WithdrawalFees` (r:1 w:0)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// Storage: `TheaExecutor::RandomnessNonce` (r:1 w:1)
	/// Proof: `TheaExecutor::RandomnessNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:0 w:1)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn withdraw(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `826`
		//  Estimated: `6196`
		// Minimum execution time: 298_091_000 picoseconds.
		Weight::from_parts(307_703_055, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `TheaExecutor::PendingWithdrawals` (r:1 w:1)
	/// Proof: `TheaExecutor::PendingWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::Metadata` (r:1 w:0)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::WithdrawalFees` (r:1 w:0)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// Storage: `TheaExecutor::RandomnessNonce` (r:1 w:1)
	/// Proof: `TheaExecutor::RandomnessNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:0 w:1)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn parachain_withdraw(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `793`
		//  Estimated: `6196`
		// Minimum execution time: 292_691_000 picoseconds.
		Weight::from_parts(299_784_577, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `TheaExecutor::PendingWithdrawals` (r:1 w:1)
	/// Proof: `TheaExecutor::PendingWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::Metadata` (r:1 w:0)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::WithdrawalFees` (r:1 w:0)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// Storage: `TheaExecutor::RandomnessNonce` (r:1 w:1)
	/// Proof: `TheaExecutor::RandomnessNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:0 w:1)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn evm_withdraw(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `793`
		//  Estimated: `6196`
		// Minimum execution time: 291_731_000 picoseconds.
		Weight::from_parts(298_899_706, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			// Standard Error: 58
			.saturating_add(Weight::from_parts(193, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:1 w:0)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 1000]`.
	/// The range of component `y` is `[1, 1000]`.
	fn on_initialize(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `694`
		//  Estimated: `4109`
		// Minimum execution time: 15_380_000 picoseconds.
		Weight::from_parts(13_554_789, 0)
			.saturating_add(Weight::from_parts(0, 4109))
			// Standard Error: 94
			.saturating_add(Weight::from_parts(7_061, 0).saturating_mul(x.into()))
			// Standard Error: 94
			.saturating_add(Weight::from_parts(8_260, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn burn_native_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140`
		//  Estimated: `3593`
		// Minimum execution time: 100_221_000 picoseconds.
		Weight::from_parts(102_040_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TheaExecutor::ApprovedDeposits` (r:1 w:1)
	/// Proof: `TheaExecutor::ApprovedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::Metadata` (r:1 w:0)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 1000]`.
	fn claim_deposit(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1555`
		//  Estimated: `5011`
		// Minimum execution time: 802_033_000 picoseconds.
		Weight::from_parts(816_944_687, 0)
			.saturating_add(Weight::from_parts(0, 5011))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}
