// This file is part of Polkadex.

// Copyright (C) 2020-2023 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

//! Autogenerated weights for `thea_council`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-28, STEPS: `100`, REPEAT: `200`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// thea_council
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// thea_council_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `thea_council`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::TheaCouncilWeightInfo for WeightInfo<T> {
    /// Storage: TheaCouncil ActiveCouncilMembers (r:1 w:0)
    /// Proof: TheaCouncil ActiveCouncilMembers (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
    /// Storage: TheaCouncil PendingCouncilMembers (r:1 w:1)
    /// Proof: TheaCouncil PendingCouncilMembers (max_values: Some(1), max_size: Some(401), added: 896, mode: MaxEncodedLen)
    /// Storage: TheaCouncil Proposals (r:1 w:1)
    /// Proof: TheaCouncil Proposals (max_values: None, max_size: Some(370), added: 2845, mode: MaxEncodedLen)
    /// The range of component `b` is `[1, 1000]`.
    /// The range of component `b` is `[1, 1000]`.
    fn add_member(_b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `168`
        //  Estimated: `3835`
        // Minimum execution time: 13_313_000 picoseconds.
        Weight::from_parts(14_011_349, 0)
            .saturating_add(Weight::from_parts(0, 3835))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: TheaCouncil ActiveCouncilMembers (r:1 w:1)
    /// Proof: TheaCouncil ActiveCouncilMembers (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
    /// Storage: TheaCouncil Proposals (r:1 w:1)
    /// Proof: TheaCouncil Proposals (max_values: None, max_size: Some(370), added: 2845, mode: MaxEncodedLen)
    /// The range of component `b` is `[1, 1000]`.
    /// The range of component `b` is `[1, 1000]`.
    fn remove_member(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `339`
        //  Estimated: `3835`
        // Minimum execution time: 14_352_000 picoseconds.
        Weight::from_parts(14_981_588, 0)
            .saturating_add(Weight::from_parts(0, 3835))
            // Standard Error: 1
            .saturating_add(Weight::from_parts(19, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: TheaCouncil PendingCouncilMembers (r:1 w:1)
    /// Proof: TheaCouncil PendingCouncilMembers (max_values: Some(1), max_size: Some(401), added: 896, mode: MaxEncodedLen)
    /// Storage: TheaCouncil ActiveCouncilMembers (r:1 w:1)
    /// Proof: TheaCouncil ActiveCouncilMembers (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
    /// The range of component `b` is `[1, 1000]`.
    /// The range of component `b` is `[1, 1000]`.
    fn claim_membership(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `176`
        //  Estimated: `1886`
        // Minimum execution time: 10_200_000 picoseconds.
        Weight::from_parts(10_787_774, 0)
            .saturating_add(Weight::from_parts(0, 1886))
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: TheaCouncil ActiveCouncilMembers (r:1 w:0)
    /// Proof: TheaCouncil ActiveCouncilMembers (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
    /// Storage: XcmHelper PendingWithdrawals (r:1 w:1)
    /// Proof Skipped: XcmHelper PendingWithdrawals (max_values: None, max_size: None, mode: Measured)
    /// The range of component `b` is `[1, 1000]`.
    /// The range of component `b` is `[1, 1000]`.
    fn delete_transaction(_b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `256`
        //  Estimated: `3721`
        // Minimum execution time: 12_884_000 picoseconds.
        Weight::from_parts(13_467_259, 0)
            .saturating_add(Weight::from_parts(0, 3721))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
