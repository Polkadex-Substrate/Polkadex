//! Autogenerated weights for `thea_council`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-31, STEPS: `100`, REPEAT: `150`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-41-122`, CPU: `AMD EPYC 7571`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./parachain-polkadex-node
// benchmark
// pallet
// --pallet
// thea-council
// --steps
// 100
// --repeat
// 150
// --extrinsic
// *
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `thea_council`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::TheaCouncilWeightInfo for WeightInfo<T> {
	/// Storage: `TheaCouncil::ActiveCouncilMembers` (r:1 w:0)
	/// Proof: `TheaCouncil::ActiveCouncilMembers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaCouncil::PendingCouncilMembers` (r:1 w:1)
	/// Proof: `TheaCouncil::PendingCouncilMembers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaCouncil::Proposals` (r:1 w:1)
	/// Proof: `TheaCouncil::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 1000]`.
	/// The range of component `b` is `[1, 1000]`.
	fn add_member(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `168`
		//  Estimated: `3633`
		// Minimum execution time: 62_320_000 picoseconds.
		Weight::from_parts(64_481_360, 0)
			.saturating_add(Weight::from_parts(0, 3633))
			// Standard Error: 5
			.saturating_add(Weight::from_parts(21, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `TheaCouncil::ActiveCouncilMembers` (r:1 w:1)
	/// Proof: `TheaCouncil::ActiveCouncilMembers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaCouncil::Proposals` (r:1 w:1)
	/// Proof: `TheaCouncil::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 1000]`.
	/// The range of component `b` is `[1, 1000]`.
	fn remove_member(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3804`
		// Minimum execution time: 59_930_000 picoseconds.
		Weight::from_parts(61_718_475, 0)
			.saturating_add(Weight::from_parts(0, 3804))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(40, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `TheaCouncil::PendingCouncilMembers` (r:1 w:1)
	/// Proof: `TheaCouncil::PendingCouncilMembers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaCouncil::ActiveCouncilMembers` (r:1 w:1)
	/// Proof: `TheaCouncil::ActiveCouncilMembers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 1000]`.
	/// The range of component `b` is `[1, 1000]`.
	fn claim_membership(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176`
		//  Estimated: `1661`
		// Minimum execution time: 43_330_000 picoseconds.
		Weight::from_parts(45_181_495, 0)
			.saturating_add(Weight::from_parts(0, 1661))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(32, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `TheaCouncil::ActiveCouncilMembers` (r:1 w:0)
	/// Proof: `TheaCouncil::ActiveCouncilMembers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `XcmHelper::PendingWithdrawals` (r:1 w:1)
	/// Proof: `XcmHelper::PendingWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 1000]`.
	/// The range of component `b` is `[1, 1000]`.
	fn delete_transaction(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256`
		//  Estimated: `3721`
		// Minimum execution time: 50_900_000 picoseconds.
		Weight::from_parts(52_621_471, 0)
			.saturating_add(Weight::from_parts(0, 3721))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(23, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
