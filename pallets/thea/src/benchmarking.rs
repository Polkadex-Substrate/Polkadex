// This file is part of Polkadex.
//
// Copyright (c) 2022-2023 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Benchmarking setup for pallet-ocex
#![cfg(feature = "runtime-benchmarks")]

use super::*;
use crate::{fixtures::SNAPSHOT, Pallet as Thea};
use frame_benchmarking::{account, benchmarks};
use frame_support::{dispatch::UnfilteredDispatchable, traits::EnsureOrigin, BoundedVec};
use frame_system::RawOrigin;
use orderbook_primitives::Fees;
use parity_scale_codec::Decode;
use rust_decimal::{prelude::*, Decimal};
use sp_runtime::{
	traits::{BlockNumberProvider, One},
	BoundedBTreeSet,
};

// Check if last event generated by pallet is the one we're expecting
fn assert_last_event<T: Config>(generic_event: <T as Config>::RuntimeEvent) {
	frame_system::Pallet::<T>::assert_last_event(generic_event.into());
}

fn convert_to_balance<T: Config>(dec: Decimal) -> BalanceOf<T> {
	BalanceOf::<T>::decode(
		&mut &dec.saturating_mul(UNIT_BALANCE.into()).to_u128().unwrap().to_le_bytes()[..],
	)
	.unwrap()
}

fn tpc(base_asset: AssetId, quote_asset: AssetId) -> TradingPairConfig {
	TradingPairConfig {
		base_asset,
		quote_asset,
		min_price: Decimal::from_f32(0.0001).unwrap(),
		max_price: Decimal::from_f32(100000.0).unwrap(),
		price_tick_size: Decimal::from_f32(0.000001).unwrap(),
		min_qty: Decimal::from_f64(0.001).unwrap(),
		max_qty: Decimal::from_f32(10000.0).unwrap(),
		qty_step_size: Decimal::from_f64(0.001).unwrap(),
		operational_status: true,
		base_asset_precision: 1,
		quote_asset_precision: 1,
	}
}

benchmarks! {
	update_network_pref {
		let b in 0 .. 50_000;

	}: _(RawOrigin::None, authority, network, signature)
	verify {
		assert_last_event::<T>(Event::NetworkUpdated { authority, network});
	}

	incomming_message {
		let b in 0 .. 50_000;

	}: _(RawOrigin::None, bitmap, payload, signature)
	verify {
		assert!(Thea::IncomingNonce::<T>::len() == 1);
		assert!(Thea::IncomingMessages::<T>::len() == 1);
	}

	send_thea_message {
		let b in 0 .. 50_000;
	}: _(RawOrigin::Root, data, network)
	verify {
		assert!(Thea::OutgoingNonce::<T>::len() == 1);
		assert!(Thea::OutgoingMessages::<T>::len() == 1);
	}

	update_incoming_nonce {
		let b in 0 .. 50_000;

	}: _(RawOrigin::Root, nonce, network)
	verify {
		assert!(Thea::IncomingNonce::<T>::len() == 1);
	}
}

#[cfg(test)]
use frame_benchmarking::impl_benchmark_test_suite;

#[cfg(test)]
impl_benchmark_test_suite!(Thea, crate::mock::new_test_ext(), crate::mock::Test);
