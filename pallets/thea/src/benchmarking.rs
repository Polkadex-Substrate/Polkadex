// This file is part of Polkadex.

// Copyright (C) 2020-2023 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Benchmarking setup for pallet-thea
//#![cfg(feature = "runtime-benchmarks")]

use super::*;
use crate::Pallet as Thea;
use frame_benchmarking::{account, benchmarks};
use frame_support::{dispatch::UnfilteredDispatchable, traits::EnsureOrigin, BoundedVec};
use frame_system::{Config, RawOrigin};
use sp_runtime::traits::{ConstU32, Zero};
use sp_std::vec;

// Check if last event generated by pallet is the one we're expecting
fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
	frame_system::Pallet::<T>::assert_last_event(generic_event.into());
}

benchmarks! {
	approve_deposit {
		let call = Call::<T>::approve_deposit{ };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }

	claim_deposit {
		let a in 0 .. 255;
		let m in 100 .. u32::MAX;
		let account: T::AccountId = account::<T::AccountId>("target", a, 0);
		<T as Thea::Config>::Currency::make_free_balance_be(&account, T::Currency::minimum_balance());
		// generate max number of deposits
		let mut ad = vec!();
		for i in 1..101u128 {
			let d = ApprovedDeposit {
				recipient: 1 as u64,
				network_id: mock::NETWORK,
				deposit_nonce: i as u32,
				amount: i.saturating_add(100_000).saturating_mul(100_000),
				asset_id,
				tx_hash: [i as u8; 32].into(),
			};
			ad.push(d);
		}
		let ad: BoundedVec<
			ApprovedDeposit<<T as frame_system::Config>::AccountId>,
			ConstU32<100>,
		> = ad.try_into().unwrap();
		<ApprovedDeposits<T>>::insert(account.clone(), ad);
		let call = Call::<T>::claim_deposit{ num_deposits: 100 };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(acconut.clone()).into())? }

	batch_withdrawal_complete {
		let call = Call::<T>::batch_withdrawal_complete{ };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }
	verify {
		//assert_last_event::<T>(Event::Nominated { candidate, nominator }.into());
	}

	withdraw {
		let call = Call::<T>::withdraw{};
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }
	verify{
		//assert_last_event::<T>(Event::Bonded{ candidate, nominator, amount }.into());
	}

	set_withdrawal_fee {
		let call = Call::<T>::set_withdrawal_fee{ };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }
	verify {
		//assert_last_event::<T>(Event::Unbonded{ candidate, nominator, amount }.into());
	}

	thea_key_rotation_complete {
		let call = Call::<T>::thea_key_rotation_complete{};
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }
	verify {
		//assert_last_event::<T>(Event::BondsWithdrawn{ nominator, amount }.into());
	}

	set_thea_key_complete {
		let call = Call::<T>::set_thea_key_complete{  };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }
	verify {
		//assert_last_event::<T>(Event::OutgoingCandidateAdded{ candidate }.into());
	}

	thea_queued_queued_public_key {
		let call = Call::<T>::thea_queued_queued_public_key{};
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }
	verify {
		//assert_last_event::<T>(Event::NetworkAdded{ network }.into());
	}

	thea_relayers_reset_rotation {
		let call = Call::<T>::thea_relayers_reset_rotation{ network };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(1).into())? }
	verify {
		//assert_last_event::<T>(Event::NetworkRemoved{ network }.into());
	}
}

#[cfg(test)]
use frame_benchmarking::impl_benchmark_test_suite;

#[cfg(test)]
impl_benchmark_test_suite!(Thea, crate::mock::new_test_ext(), crate::mock::Test);
