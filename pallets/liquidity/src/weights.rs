
//! Autogenerated weights for `liquidity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-07, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Nakuls-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/polkadex-node
// benchmark
// pallet
// --pallet
// liquidity
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// liquidity_weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use crate::LiquidityWeightInfo;

/// Weight functions for `liquidity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> LiquidityWeightInfo for WeightInfo<T> {
    // Storage: Liquidity RegisterGovernanceAccounts (r:1 w:1)
    // Storage: OCEX ExchangeState (r:1 w:0)
    // Storage: OCEX Accounts (r:1 w:1)
    // Storage: OCEX IngressMessages (r:1 w:1)
    /// The range of component `a` is `[0, 4294967295]`.
    fn register_account(_a: u32, ) -> Weight {
        (13_808_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    // Storage: Liquidity RegisterGovernanceAccounts (r:1 w:0)
    // Storage: OCEX ExchangeState (r:1 w:0)
    // Storage: OCEX AllowlistedToken (r:1 w:0)
    // Storage: OCEX Accounts (r:1 w:0)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: OCEX TotalAssets (r:1 w:1)
    // Storage: OCEX IngressMessages (r:1 w:1)
    /// The range of component `a` is `[1, 255]`.
    /// The range of component `i` is `[0, 4294967295]`.
    fn deposit_to_orderbook(_a: u32, _i: u32, ) -> Weight {
        (34_807_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    // Storage: Liquidity RegisterGovernanceAccounts (r:1 w:0)
    // Storage: OCEX ExchangeState (r:1 w:0)
    // Storage: OCEX AllowlistedToken (r:1 w:0)
    // Storage: OCEX Accounts (r:1 w:0)
    // Storage: OCEX IngressMessages (r:1 w:1)
    /// The range of component `a` is `[1, 255]`.
    /// The range of component `i` is `[0, 4294967295]`.
    fn withdraw_from_orderbook(a: u32, _i: u32, ) -> Weight {
        (15_758_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
}
