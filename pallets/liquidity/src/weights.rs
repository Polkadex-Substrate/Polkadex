// This file is part of Polkadex.
//
// Copyright (c) 2023 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `liquidity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-14, STEPS: `10`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `fedoripper`, CPU: `AMD Ryzen Threadripper 3960X 24-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/polkadex-node
// benchmark
// pallet
// --pallet
// liquidity
// --steps
// 10
// --repeat
// 20
// --extrinsic
// *
// --output
// pallets/liquidity/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `liquidity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: Liquidity RegisterGovernanceAccounts (r:1 w:1)
	/// Proof Skipped: Liquidity RegisterGovernanceAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Accounts (r:1 w:1)
	/// Proof Skipped: OCEX Accounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `a` is `[0, 4294967295]`.
	fn register_account(_a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243`
		//  Estimated: `3708`
		// Minimum execution time: 16_459_000 picoseconds.
		Weight::from_parts(17_322_100, 0)
			.saturating_add(Weight::from_parts(0, 3708))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Liquidity RegisterGovernanceAccounts (r:1 w:0)
	/// Proof Skipped: Liquidity RegisterGovernanceAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX AllowlistedToken (r:1 w:0)
	/// Proof Skipped: OCEX AllowlistedToken (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Accounts (r:1 w:0)
	/// Proof Skipped: OCEX Accounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(222), added: 2697, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:1)
	/// Proof: Assets Account (max_values: None, max_size: Some(146), added: 2621, mode: MaxEncodedLen)
	/// Storage: OCEX TotalAssets (r:1 w:1)
	/// Proof Skipped: OCEX TotalAssets (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `a` is `[1, 4294967295]`.
	/// The range of component `i` is `[0, 4294967295]`.
	/// The range of component `z` is `[10, 4294967295]`.
	fn deposit_to_orderbook(_a: u32, _i: u32, _z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `928`
		//  Estimated: `6232`
		// Minimum execution time: 42_269_000 picoseconds.
		Weight::from_parts(44_603_785, 0)
			.saturating_add(Weight::from_parts(0, 6232))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Liquidity RegisterGovernanceAccounts (r:1 w:0)
	/// Proof Skipped: Liquidity RegisterGovernanceAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX AllowlistedToken (r:1 w:0)
	/// Proof Skipped: OCEX AllowlistedToken (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Accounts (r:1 w:0)
	/// Proof Skipped: OCEX Accounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `a` is `[1, 4294967295]`.
	/// The range of component `i` is `[0, 4294967295]`.
	/// The range of component `z` is `[10, 4294967295]`.
	fn withdraw_from_orderbook(_a: u32, _i: u32, _z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `553`
		//  Estimated: `4018`
		// Minimum execution time: 21_039_000 picoseconds.
		Weight::from_parts(21_582_288, 0)
			.saturating_add(Weight::from_parts(0, 4018))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
