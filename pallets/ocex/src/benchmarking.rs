// This file is part of Polkadex.

// Copyright (C) 2020-2022 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Benchmarking setup for pallet-ocex
#![cfg(feature = "runtime-benchmarks")]

use super::*;
use crate::Pallet as Ocex;
use frame_benchmarking::{account, benchmarks};
use frame_support::{
	dispatch::UnfilteredDispatchable, traits::EnsureOrigin, BoundedBTreeMap, BoundedVec,
};
use frame_system::RawOrigin;
use parity_scale_codec::Decode;
use polkadex_primitives::{
	ocex::TradingPairConfig,
	snapshot::{EnclaveSnapshot, Fees},
	withdrawal::Withdrawal,
	ProxyLimit, WithdrawalLimit, UNIT_BALANCE,
};
use rust_decimal::{prelude::*, Decimal};
use sp_runtime::{traits::One, BoundedBTreeSet};
use sp_std::vec;

// Check if last event generated by pallet is the one we're expecting
fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
	frame_system::Pallet::<T>::assert_last_event(generic_event.into());
}

fn convert_to_balance<T: Config>(dec: Decimal) -> BalanceOf<T> {
	BalanceOf::<T>::decode(
		&mut &dec.saturating_mul(UNIT_BALANCE.into()).to_u128().unwrap().to_le_bytes()[..],
	)
	.unwrap()
}

fn tpc(base_asset: AssetId, quote_asset: AssetId) -> TradingPairConfig {
	TradingPairConfig {
		base_asset,
		quote_asset,
		min_price: Decimal::from_f32(0.0001).unwrap(),
		max_price: Decimal::from_f32(100000.0).unwrap(),
		price_tick_size: Decimal::from_f32(0.000001).unwrap(),
		min_qty: Decimal::from_f64(0.001).unwrap(),
		max_qty: Decimal::from_f32(10000.0).unwrap(),
		qty_step_size: Decimal::from_f64(0.001).unwrap(),
		operational_status: true,
		base_asset_precision: 1,
		quote_asset_precision: 1,
	}
}

benchmarks! {
	register_main_account {
		let b in 0 .. 50_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let account = T::EnclaveOrigin::successful_origin();
		let main: T::AccountId = match unsafe { origin.clone().into().unwrap_unchecked() } {
			RawOrigin::Signed(account) => account.into(),
			_ => panic!("wrong RawOrigin returned")
		};
		let proxy: T::AccountId = match unsafe { account.into().unwrap_unchecked() } {
			RawOrigin::Signed(account) => account.into(),
			_ => panic!("wrong RawOrigin returned")
		};
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::register_main_account { proxy: proxy.clone() };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::MainAccountRegistered {
			main,
			proxy
		}.into());
	}

	add_proxy_account {
		let x in 0 .. 255; // should not overflow u8
		let origin = T::EnclaveOrigin::successful_origin();
		let main: T::AccountId = match unsafe { origin.clone().into().unwrap_unchecked() } {
			RawOrigin::Signed(account) => account.into(),
			_ => panic!("wrong RawOrigin returned")
		};
		let proxy = T::AccountId::decode(&mut &[x as u8; 32].to_vec()[..]).unwrap();
		<ExchangeState<T>>::put(true);
		Ocex::<T>::register_main_account(origin.clone(), main.clone())?;
		let call = Call::<T>::add_proxy_account { proxy: proxy.clone() };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::MainAccountRegistered {
			main,
			proxy
		}.into());
	}

	close_trading_pair {
		let x in 1 .. 50_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let base = AssetId::asset(x.into());
		let quote = AssetId::asset((x + 1).into());
		let config = tpc(base, quote);
		<TradingPairs<T>>::insert(base, quote, config);
		let pair = <TradingPairs<T>>::get(base, quote).unwrap();
		let expected_pair = TradingPairConfig {
			operational_status: false,
			..pair
		};
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::close_trading_pair { base, quote };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::ShutdownTradingPair {
			pair: expected_pair
		}.into());
	}

	open_trading_pair {
		let x in 0 .. 100_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let base = AssetId::asset(x.into());
		let quote = AssetId::asset((x + 1).into());
		let config = tpc(base, quote);
		<TradingPairs<T>>::insert(base, quote, config.clone());
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::open_trading_pair { base, quote };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::OpenTradingPair {
			pair: config,
		}.into());
	}

	register_trading_pair {
		let x in 0 .. 100_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let base = AssetId::asset(x.into());
		let quote = AssetId::asset((x + 1).into());
		let TradingPairConfig{
			base_asset,
			quote_asset,
			min_price,
			max_price,
			min_qty,
			max_qty,
			operational_status,
			price_tick_size,
			qty_step_size,
			base_asset_precision,
			quote_asset_precision,
			} = tpc(base, quote);
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::register_trading_pair {
			base,
			quote,
			min_order_price: convert_to_balance::<T>(min_price),
			max_order_price: convert_to_balance::<T>(max_price),
			min_order_qty: convert_to_balance::<T>(min_qty),
			max_order_qty: convert_to_balance::<T>(max_qty),
			price_tick_size: convert_to_balance::<T>(price_tick_size),
			qty_step_size: convert_to_balance::<T>(qty_step_size)
		};
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::TradingPairRegistered {
			base,
			quote
		}.into());
	}

	update_trading_pair {
		let x in 0 .. 100_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let base = AssetId::asset(x.into());
		let quote = AssetId::asset((x + 1).into());
		let mut tp = tpc(base, quote);
		let TradingPairConfig{
			base_asset,
			quote_asset,
			min_price,
			max_price,
			min_qty,
			max_qty,
			operational_status,
			price_tick_size,
			qty_step_size,
			base_asset_precision,
			quote_asset_precision,
			} = tp.clone();
		let governance = T::GovernanceOrigin::successful_origin();
		Ocex::<T>::set_exchange_state(governance.clone(), true)?;
		tp.operational_status = false;
		<TradingPairs<T>>::insert(base_asset, quote_asset, tp);
		let call = Call::<T>::update_trading_pair {
			base,
			quote,
			min_order_price: convert_to_balance::<T>(min_price),
			max_order_price: convert_to_balance::<T>(max_price),
			min_order_qty: convert_to_balance::<T>(min_qty),
			max_order_qty: convert_to_balance::<T>(max_qty),
			price_tick_size: convert_to_balance::<T>(price_tick_size),
			qty_step_size: convert_to_balance::<T>(qty_step_size)
		};
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::TradingPairUpdated {
			base,
			quote
		}.into());
	}

	deposit {
		let x in 1 .. 255; // should not overflow u8
		let user = account::<T::AccountId>("user", x, 0);
		let asset = AssetId::asset(x.into());
		let amount  = BalanceOf::<T>::decode(&mut &(x as u128).saturating_mul(10u128).to_le_bytes()[..]).unwrap();
		let governance = T::GovernanceOrigin::successful_origin();
		Ocex::<T>::set_exchange_state(governance.clone(), true)?;
		Ocex::<T>::allowlist_token(governance.clone(), asset.clone())?;
		use frame_support::traits::fungibles::Create;
		T::OtherAssets::create(
			x as u128,
			Ocex::<T>::get_pallet_account(),
			true,
			BalanceOf::<T>::one().unique_saturated_into())?;
		T::OtherAssets::mint_into(
			x as u128,
			&user.clone(),
			BalanceOf::<T>::decode(&mut &(u128::MAX).to_le_bytes()[..]).unwrap()
		)?;
		let proxy = account::<T::AccountId>("proxy", x, 0);
		Ocex::<T>::register_main_account(RawOrigin::Signed(user.clone()).into(), proxy)?;
		let call = Call::<T>::deposit { asset, amount };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(user.clone()).into())? }
	verify {
		assert_last_event::<T>(Event::DepositSuccessful {
			user,
			asset,
			amount
		}.into());
	}

	remove_proxy_account {
		let x in 1 .. 255; // should not overflow u8
		let main = account::<T::AccountId>("main", 0, 0);
		let proxy = T::AccountId::decode(&mut &[x as u8 ; 32].to_vec()[..]).unwrap();
		let governance = T::GovernanceOrigin::successful_origin();
		Ocex::<T>::set_exchange_state(governance.clone(), true)?;
		let signed = RawOrigin::Signed(main.clone());
		Ocex::<T>::register_main_account(signed.clone().into(), proxy.clone())?;
		// worst case scenario
		for i in 2 .. ProxyLimit::get() {
			let new_proxy = account::<T::AccountId>("proxy", i, 0);
			Ocex::<T>::add_proxy_account(signed.clone().into(), new_proxy)?;
		}
		let call = Call::<T>::remove_proxy_account { proxy: proxy.clone() };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(main.clone()).into())? }
	verify {
		assert_last_event::<T>(Event::ProxyRemoved {
			main,
			proxy
		}.into());
	}

	submit_snapshot {
		let origin = T::AccountId::decode(&mut &[6, 196, 28, 36, 60, 116, 41, 76, 197, 21, 40, 124, 17, 142, 128, 189, 115, 168, 219, 199, 151, 158, 208, 8, 177, 131, 105, 116, 42, 17, 129, 26][..]).unwrap();
		let snapshot = EnclaveSnapshot::decode(&mut &[1, 0, 0, 0, 6, 196, 28, 36, 60, 116, 41, 76, 197, 21, 40, 124, 17, 142, 128, 189, 115, 168, 219, 199, 151, 158, 208, 8, 177, 131, 105, 116, 42, 17, 129, 26, 0, 0, 0, 0, 0, 0, 0, 0, 23, 37, 201, 208, 94, 204, 130, 95, 211, 53, 43, 176, 181, 1, 65, 226, 243, 204, 57, 204, 23, 96, 37, 86, 231, 196, 102, 57, 246, 53, 78, 45, 4, 6, 196, 28, 36, 60, 116, 41, 76, 197, 21, 40, 124, 17, 142, 128, 189, 115, 168, 219, 199, 151, 158, 208, 8, 177, 131, 105, 116, 42, 17, 129, 26, 4, 6, 196, 28, 36, 60, 116, 41, 76, 197, 21, 40, 124, 17, 142, 128, 189, 115, 168, 219, 199, 151, 158, 208, 8, 177, 131, 105, 116, 42, 17, 129, 26, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0][..]).unwrap();
		let signature = T::Signature::decode(&mut &[1, 72, 147, 92, 172, 203, 231, 169, 79, 161, 0, 194, 169, 78, 12, 77, 116, 14, 7, 123, 158, 175, 231, 123, 104, 171, 190, 145, 83, 0, 205, 149, 71, 207, 251, 50, 173, 233, 38, 192, 117, 255, 49, 30, 177, 16, 241, 184, 36, 251, 100, 211, 178, 101, 255, 177, 13, 75, 130, 72, 242, 35, 95, 182, 129][..]).unwrap();
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::submit_snapshot { snapshot, signature };
	}: { call.dispatch_bypass_filter(RawOrigin::Signed(origin).into())? }
	verify {
		assert!(<Snapshots<T>>::contains_key(1));
	}

	collect_fees {
		let x in 0 .. 255; // should not overflow u8
		let origin = T::GovernanceOrigin::successful_origin();
		let beneficiary = T::AccountId::decode(&mut &[x as u8; 32][..]).unwrap();
		let fees: Fees = Fees { asset: AssetId::polkadex, amount: Decimal::new(100, 1) };
		let snapshot =
			EnclaveSnapshot::<_, _, _, _> {
				snapshot_number: x.into(),
				snapshot_hash: Default::default(),
				withdrawals: Default::default(),
				fees: BoundedVec::try_from(vec!(fees)).unwrap(),
				enclave_id: T::AccountId::decode(&mut &[(x + 1) as u8; 32][..]).unwrap(),
				event_id: x as u64
			};
		<ExchangeState<T>>::put(true);
		<Snapshots<T>>::insert(x as u64, snapshot);
		let call = Call::<T>::collect_fees { snapshot_id: x, beneficiary: beneficiary.clone() };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::FeesClaims{ beneficiary, snapshot_id: x }.into());
	}

	shutdown {
		let origin = T::GovernanceOrigin::successful_origin();
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::shutdown {};
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_eq!(<ExchangeState<T>>::get(), false);
		assert_eq!(<IngressMessages<T>>::get().last().unwrap(), &polkadex_primitives::ingress::IngressMessages::Shutdown);
	}

	set_exchange_state {
		let x in 0 .. 100_000;
		let state = x % 2 == 0;
		let origin = T::GovernanceOrigin::successful_origin();
		<ExchangeState<T>>::put(state);
		let call = Call::<T>::set_exchange_state { state: !state };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_eq!(<ExchangeState<T>>::get(), !state);
	}

	set_balances {
		let x in 0 .. 255; // should not overflow up
		let origin = T::GovernanceOrigin::successful_origin();
		let main_account = T::AccountId::decode(&mut &[x as u8; 32][..]).unwrap();
		let asset_id = AssetId::asset(x as u128);
		let hb = polkadex_primitives::ingress::HandleBalance {
			main_account,
			asset_id,
			free: (x * 100) as u128,
			reserve: (x * 10) as u128
		};
		let mut change_in_balances: BoundedVec<
			polkadex_primitives::ingress::HandleBalance<T::AccountId>,
			polkadex_primitives::ingress::HandleBalanceLimit,
		> = BoundedVec::default();
		change_in_balances.try_push(hb).unwrap();
		let call = Call::<T>::set_balances { change_in_balances };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_eq!(<IngressMessages<T>>::get().len(), 1);
	}

	claim_withdraw {
		let x in 1 .. 255; // should not overflow u8
		let governance = T::GovernanceOrigin::successful_origin();
		let origin = T::EnclaveOrigin::successful_origin();
		let main = T::AccountId::decode(&mut &[x as u8; 32][..]).unwrap();
		let asset = AssetId::asset(x.into());
		let amount = BalanceOf::<T>::decode(&mut &(x as u128).to_le_bytes()[..]).unwrap();
		let mut vec_withdrawals = Vec::with_capacity(1);
		let fees = Decimal::new(100, 5);
		vec_withdrawals.push(Withdrawal {
			amount: Decimal::new(x.into(), 0),
			asset,
			main_account: main.clone(),
			event_id: 1,
			fees,
		});
		let withdrawals: BoundedVec<Withdrawal<T::AccountId>, WithdrawalLimit> = frame_support::BoundedVec::try_from(vec_withdrawals.clone()).unwrap();
		let mut wm = BoundedBTreeMap::new();
		wm.try_insert(main.clone(), withdrawals.clone()).unwrap();
		<Withdrawals<T>>::insert(x as u64, wm);
		Ocex::<T>::set_exchange_state(governance.clone(), true)?;
		Ocex::<T>::allowlist_token(governance.clone(), asset.clone())?;
		use frame_support::traits::fungibles::Create;
		T::OtherAssets::create(
			x as u128,
			Ocex::<T>::get_pallet_account(),
			true,
			BalanceOf::<T>::one().unique_saturated_into())?;
		T::OtherAssets::mint_into(
			x as u128,
			&Ocex::<T>::get_pallet_account(),
			BalanceOf::<T>::decode(&mut &(u128::MAX).to_le_bytes()[..]).unwrap()
		)?;
		let call = Call::<T>::claim_withdraw { snapshot_id: x as u64, account: main.clone() };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::WithdrawalClaimed {
			main,
			withdrawals: vec_withdrawals,
		}.into());
	}

	allowlist_token {
		let x in 0 .. 65_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let asset_id = AssetId::asset(x.into());
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::allowlist_token { token: asset_id };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::TokenAllowlisted(asset_id).into());
	}

	remove_allowlisted_token {
		let x in 0 .. 65_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let asset_id = AssetId::asset(x.into());
		let mut at: BoundedBTreeSet<AssetId, AllowlistedTokenLimit> = BoundedBTreeSet::new();
		at.try_insert(asset_id).unwrap();
		<AllowlistedToken<T>>::put(at);
		<ExchangeState<T>>::put(true);
		let call = Call::<T>::remove_allowlisted_token { token: asset_id };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::AllowlistedTokenRemoved(asset_id).into());
	}
}

#[cfg(test)]
use frame_benchmarking::impl_benchmark_test_suite;

#[cfg(test)]
impl_benchmark_test_suite!(Ocex, crate::mock::new_test_ext(), crate::mock::Test);
