// This file is part of Polkadex.

// Copyright (C) 2020-2022 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.unwrap().

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Benchmarking setup for pallet-ocex
#![cfg(feature = "runtime-benchmarks")]

use super::*;
use codec::{Decode, Encode};
use frame_benchmarking::benchmarks_instance_pallet;
use frame_support::{traits::EnsureOrigin, BoundedBTreeMap, BoundedVec};
use frame_system::RawOrigin;
use polkadex_primitives::{
	ocex::TradingPairConfig,
	snapshot::{EnclaveSnapshot, Fees},
	withdrawal::Withdrawal,
	WithdrawalLimit,
};
use rust_decimal::{prelude::*, Decimal};
use sp_core::{crypto::Pair as PairTrait, H256};
use sp_runtime::traits::CheckedConversion;
use test_utils::ias::ias::*;

// Check if last event generated by pallet is the one we're expecting
fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
	frame_system::Pallet::<T>::assert_last_event(generic_event.into());
}

// All benchmarks names match extrinsic names so we call them with `_()`
benchmarks_instance_pallet! {
	register_main_account {
		let b in 0 .. 50_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let account = T::AccountId::decode(&mut &[b as u8; 32].to_vec()[..]).unwrap();
		let main = ensure_signed(T::EnclaveOrigin::successful_origin()).unwrap();
	}: _(origin, account.clone().into())
	verify {
		assert_last_event(Event::MainAccountRegistered {
			main,
			proxy: account.into()
		}.into());
	}

	add_proxy_account {
		let x in 0 .. 50_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let main = ensure_signed(T::EnclaveOrigin::successful_origin()).unwrap();
		let account = T::AccountId::decode(&mut &[x as u8; 32].to_vec()[..]).unwrap();
	}: _(origin.clone(), account.clone())
	verify {
		assert_last_event::<T>(Event::MainAccountRegistered {
			main,
			proxy: account
		}.into());
	}

	close_trading_pair {
		let x in 1 .. 50_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let base = AssetId::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let quote = AssetId::decode(&mut &((x + 1) as u128).to_be_bytes()[..]).unwrap();
		let config = TradingPairConfig {
			base_asset: base,
			quote_asset: quote,
			min_price: Decimal::from_f32(0.0001).unwrap(),
			max_price: Decimal::from_f32(100000.0).unwrap(),
			price_tick_size: Decimal::from_f32(0.000001).unwrap(),
			min_qty: Decimal::from_f64(0.001).unwrap(),
			max_qty: Decimal::from_f32(10000.0).unwrap(),
			qty_step_size: Decimal::from_f64(0.001).unwrap(),
			operational_status: true,
			base_asset_precision: 1,
			quote_asset_precision: 1
		};
		<TradingPairs<T>>::insert(base, quote, config);
		let trading_pair = <TradingPairs<T>>::get(base, quote).unwrap();
	}: _(origin, base, quote)
	verify {
		assert_last_event::<T>(Event::ShutdownTradingPair {
			pair: trading_pair
		}.into());
	}

	open_trading_pair {
		let x in 0 .. 100_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let base = AssetId::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let quote = AssetId::decode(&mut &((x + 1) as u128).to_be_bytes()[..]).unwrap();
		let config = TradingPairConfig {
			base_asset: base,
			quote_asset: quote,
			min_price: Decimal::from_f32(0.0001).unwrap(),
			max_price: Decimal::from_f32(100000.0).unwrap(),
			price_tick_size: Decimal::from_f32(0.000001).unwrap(),
			min_qty: Decimal::from_f64(0.001).unwrap(),
			max_qty: Decimal::from_f32(10000.0).unwrap(),
			qty_step_size: Decimal::from_f64(0.001).unwrap(),
			operational_status: true,
			base_asset_precision: 1,
			quote_asset_precision: 1
		};
		<TradingPairs<T>>::insert(base, quote, config);
		let pair = <TradingPairs<T>>::get(base, quote).unwrap();
	}: _(origin, base, quote)
	verify {
		assert_last_event::<T>(Event::OpenTradingPair {
			pair,
		}.into());
	}

	register_trading_pair {
		let x in 0 .. 100_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let base = AssetId::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let quote = AssetId::decode(&mut &((x + 1) as u128).to_be_bytes()[..]).unwrap();
		let balance = BalanceOf::<T>::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let zero = BalanceOf::<T>::decode(&mut &(0 as u128).to_be_bytes()[..]).unwrap();
	}: _(origin, base, quote, balance, balance, balance, balance, zero, zero)
	verify {
		assert_last_event::<T>(Event::TradingPairRegistered {
			base,
			quote
		}.into());
	}

	update_trading_pair {
		let x in 0 .. 100_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let base = AssetId::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let quote = AssetId::decode(&mut &((x + 1) as u128).to_be_bytes()[..]).unwrap();
		let balance = BalanceOf::<T>::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let zero = BalanceOf::<T>::decode(&mut &(0 as u128).to_be_bytes()[..]).unwrap();
	}: _(origin, base, quote, balance, balance, balance, balance, zero, zero)
	verify {
		assert_last_event::<T>(Event::TradingPairRegistered {
			base,
			quote
		}.into());
	}

	deposit {
		let x in 0 .. 100_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let user = ensure_signed(T::EnclaveOrigin::successful_origin()).unwrap();
		let asset = AssetId::decode(&mut &((x  + 1) as u128).to_be_bytes()[..]).unwrap();
		let amount  = BalanceOf::<T>::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
	}: _(origin, asset, amount)
	verify {
		assert_last_event::<T>(Event::DepositSuccessful {
			user,
			asset,
			amount
		}.into());
	}

	remove_proxy_account {
		let x in 0 .. 100_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let main = ensure_signed(T::EnclaveOrigin::successful_origin()).unwrap();
		let account = T::AccountId::decode(&mut &[x as u8; 32].to_vec()[..]).unwrap();
	}: _(origin.clone(), account.clone())
	verify {
		assert_last_event::<T>(Event::MainAccountRegistered {
			main,
			proxy: account
		}.into());
	}

	submit_snapshot {
		let x in 0 .. 65_000;
		let pair = sp_core::sr25519::Pair::from_seed(&[x as u8; 32]);
		let public = pair.public();
		let origin = T::AccountId::decode(&mut public.0.as_slice()).unwrap();
		let snapshot = EnclaveSnapshot {
			snapshot_number: x,
			snapshot_hash: H256::from([x as u8; 32]),
			withdrawals: Default::default(),
			fees: Default::default()
		};
		let bytes = snapshot.encode();
		let signature = T::Signature::decode(&mut pair.sign(&bytes).0.as_slice()).unwrap();
	}: _(RawOrigin::Signed(origin), snapshot, signature)
	verify {
		assert!(<Snapshots<T>>::contains_key(x));
	}

	insert_enclave {
		let x in 0 .. 100_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let enclave = T::AccountId::decode(&mut &[x as u8; 32][..]).unwrap();
	}: _(origin, enclave.clone())
	verify {
		assert!(<RegisteredEnclaves<T>>::contains_key(enclave));
	}

	collect_fees {
		let x in 0 .. 100_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let beneficiary = T::AccountId::decode(&mut &[x as u8; 32][..]).unwrap();
		let fees: Fees = Fees { asset: AssetId::polkadex, amount: Decimal::new(100, 1) };
		let snapshot =
			EnclaveSnapshot::<_, _, _, _> {
				snapshot_number: x.into(),
				snapshot_hash: H256::from([x as u8; 32]),
				withdrawals: Default::default(),
				fees: BoundedVec::try_from(vec!(fees)).unwrap(),
			};
		<Snapshots<T>>::insert(x, snapshot);
	}: _(origin, x, beneficiary.clone())
	verify {
		assert_last_event::<T>(Event::FeesClaims{beneficiary, snapshot_id: x}.into());
	}

	shutdown {
		let origin = T::GovernanceOrigin::successful_origin();
		<ExchangeState<T>>::put(true);
	}: _(origin)
	verify {
		assert_eq!(<ExchangeState<T>>::get(), false);
	}

	set_exchange_state {
		let x in 0 .. 100_000;
		let state = x % 2 == 0;
		let origin = T::GovernanceOrigin::successful_origin();
		<ExchangeState<T>>::put(state);
	}: _(origin, !state)
	verify {
		assert_eq!(<ExchangeState<T>>::get(), !state);
		assert_eq!(<IngressMessages<T>>::get().last().unwrap(), &polkadex_primitives::ingress::IngressMessages::Shutdown);
	}

	claim_withdraw {
		let x in 0 .. 100_000;
		let origin = T::EnclaveOrigin::successful_origin();
		let main = ensure_signed(T::EnclaveOrigin::successful_origin()).unwrap();
		let asset = AssetId::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let amount = BalanceOf::<T>::decode(&mut &(x as u128).to_be_bytes()[..]).unwrap();
		let mut withdrawals = Vec::with_capacity(1);
		let fees = Decimal::new(100, 1);
		withdrawals.push(Withdrawal {
			amount: Decimal::new(x.into(), 0),
			asset,
			main_account: main.clone(),
			event_id: 1,
			fees,
		});
		let mut withdrawals: BoundedVec<Withdrawal<T::AccountId>, WithdrawalLimit> = frame_support::BoundedVec::try_from(withdrawals).unwrap();
		let mut wm = BoundedBTreeMap::new();
		wm.try_insert(main.clone().into(), withdrawals);
		<Withdrawals<T>>::insert(x, wm);
	}: _(origin, x, main.clone())
	verify {
		assert_last_event::<T>(Event::WithdrawalClaimed {
			main,
			withdrawals,
		}.into());
	}

	register_enclave {
		let x in 0 .. 65_000;
		timestamp::Pallet::<T>::set_timestamp(TEST4_SETUP.timestamp.checked_into().unwrap());
		let signer: T::AccountId = T::AccountId::decode(&mut &TEST4_SETUP.signer_pub[..]).unwrap();
	}: _(RawOrigin::Signed(signer.clone()), TEST4_SETUP.cert.to_vec())
	verify {
		assert_last_event::<T>(Event::EnclaveRegistered(signer).into());
	}

	allowlist_token {
		let x in 0 .. 65_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let asset_id = AssetId::asset(x.into());
	}: _(origin, asset_id)
	verify {
		assert_last_event::<T>(Event::TokenAllowlisted(asset_id).into());
	}

	remove_allowlisted_token {
		let x in 0 .. 65_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let asset_id = AssetId::asset(x.into());
		<AllowlistedToken<T>>::mutate(|v| v.insert(asset_id));
	}: _(origin, asset_id)
	verify {
		assert_last_event::<T>(Event::AllowlistedTokenRemoved(asset_id).into());
	}

	allowlist_enclave {
		let x in 0 .. 65_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let account = T::AccountId::decode(&mut &[x as u8; 32].to_vec()[..]).unwrap();
	}: _(origin, account.clone())
	verify {
		assert_last_event::<T>(Event::EnclaveAllowlisted(account).into());
	}

	impl_benchmark_test_suite!(Pallet, crate::tests::new_test_ext(), crate::tests::Test);
}
