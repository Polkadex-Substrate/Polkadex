// This file is part of Polkadex.

// Copyright (C) 2020-2022 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

//! Tests for pallet-ocex.

use crate::*;
use frame_support::{assert_noop, assert_ok, bounded_vec, traits::OnInitialize};
use polkadex_primitives::{
	assets::AssetId, ingress::IngressMessages, withdrawal::Withdrawal, Moment, SnapshotAccLimit,
};
use rust_decimal::prelude::FromPrimitive;
use sp_application_crypto::sp_core::H256;
// The testing primitives are very useful for avoiding having to work with signatures
// or public keys. `u64` is used as the `AccountId` and no `Signature`s are required.
use crate::mock::*;
use codec::Encode;
use frame_system::EventRecord;
use polkadex_primitives::{
	snapshot::{EnclaveSnapshot, Fees},
	AccountId, AssetsLimit, WithdrawalLimit,
};
use rust_decimal::Decimal;
use sp_application_crypto::RuntimePublic;
use sp_keystore::{testing::KeyStore, KeystoreExt, SyncCryptoStore};
use sp_runtime::{
	traits::CheckedConversion, AccountId32, BoundedBTreeMap, BoundedVec, DispatchError::BadOrigin,
	TokenError,
};
use std::sync::Arc;

pub const KEY_TYPE: sp_application_crypto::KeyTypeId = sp_application_crypto::KeyTypeId(*b"ocex");

use codec::Decode;
use ias_verify::verify_ias_report;
use test_utils::ias::ias::TEST4_SETUP;

fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
	let events = frame_system::Pallet::<T>::events();
	let system_event: <T as frame_system::Config>::Event = generic_event.into();
	// compare to the last event record
	let EventRecord { event, .. } = &events[events.len() - 1];
	assert_eq!(event, &system_event);
}

#[test]
fn test_attestation_verification() {
	let report = [
		123, 34, 99, 112, 117, 115, 118, 110, 34, 58, 91, 49, 57, 44, 49, 57, 44, 50, 44, 55, 44,
		50, 53, 53, 44, 49, 50, 56, 44, 54, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 93, 44, 34, 109, 105, 115, 99, 115, 101, 108, 101, 99, 116, 34, 58, 123,
		34, 98, 105, 116, 115, 34, 58, 48, 125, 44, 34, 97, 116, 116, 114, 105, 98, 117, 116, 101,
		115, 34, 58, 123, 34, 102, 108, 97, 103, 115, 34, 58, 123, 34, 98, 105, 116, 115, 34, 58,
		55, 125, 44, 34, 120, 102, 114, 109, 34, 58, 55, 125, 44, 34, 109, 114, 101, 110, 99, 108,
		97, 118, 101, 34, 58, 91, 49, 54, 50, 44, 49, 56, 48, 44, 49, 54, 50, 44, 49, 48, 48, 44,
		49, 55, 52, 44, 49, 52, 54, 44, 49, 52, 52, 44, 55, 54, 44, 54, 50, 44, 53, 57, 44, 56, 53,
		44, 49, 53, 53, 44, 49, 51, 57, 44, 57, 56, 44, 49, 57, 55, 44, 50, 51, 51, 44, 49, 48, 52,
		44, 50, 49, 56, 44, 49, 50, 50, 44, 50, 48, 54, 44, 49, 57, 51, 44, 56, 53, 44, 54, 51, 44,
		51, 52, 44, 54, 55, 44, 54, 53, 44, 50, 51, 54, 44, 49, 50, 56, 44, 50, 52, 51, 44, 49, 48,
		55, 44, 50, 48, 50, 44, 49, 57, 53, 93, 44, 34, 109, 114, 115, 105, 103, 110, 101, 114, 34,
		58, 91, 57, 53, 44, 49, 56, 51, 44, 49, 52, 49, 44, 53, 55, 44, 55, 53, 44, 49, 48, 49, 44,
		49, 52, 57, 44, 50, 52, 54, 44, 56, 53, 44, 50, 50, 55, 44, 50, 49, 57, 44, 55, 49, 44, 49,
		52, 44, 49, 52, 51, 44, 49, 52, 51, 44, 55, 57, 44, 50, 44, 50, 48, 57, 44, 49, 50, 55, 44,
		49, 54, 53, 44, 49, 49, 55, 44, 50, 48, 54, 44, 49, 56, 53, 44, 55, 51, 44, 56, 49, 44, 50,
		50, 56, 44, 49, 44, 50, 50, 53, 44, 49, 53, 48, 44, 49, 49, 54, 44, 50, 52, 50, 44, 51, 56,
		93, 44, 34, 105, 115, 118, 112, 114, 111, 100, 105, 100, 34, 58, 48, 44, 34, 105, 115, 118,
		115, 118, 110, 34, 58, 48, 44, 34, 114, 101, 112, 111, 114, 116, 100, 97, 116, 97, 34, 58,
		91, 49, 53, 54, 44, 56, 49, 44, 49, 57, 52, 44, 51, 53, 44, 49, 55, 52, 44, 50, 52, 50, 44,
		49, 51, 52, 44, 54, 50, 44, 49, 50, 49, 44, 50, 49, 49, 44, 49, 53, 54, 44, 49, 54, 49, 44,
		53, 55, 44, 55, 52, 44, 49, 52, 57, 44, 50, 50, 49, 44, 49, 52, 54, 44, 50, 51, 52, 44, 50,
		48, 52, 44, 50, 57, 44, 50, 53, 52, 44, 56, 52, 44, 50, 50, 51, 44, 50, 52, 50, 44, 49, 51,
		51, 44, 57, 56, 44, 49, 50, 52, 44, 50, 48, 54, 44, 49, 55, 55, 44, 55, 57, 44, 50, 48, 48,
		44, 55, 51, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 93, 44,
		34, 107, 101, 121, 105, 100, 34, 58, 91, 50, 50, 52, 44, 49, 50, 53, 44, 50, 49, 48, 44,
		49, 54, 48, 44, 50, 49, 48, 44, 51, 56, 44, 50, 49, 52, 44, 49, 53, 57, 44, 55, 54, 44, 55,
		51, 44, 50, 49, 53, 44, 49, 56, 55, 44, 49, 48, 54, 44, 56, 56, 44, 49, 51, 52, 44, 49, 51,
		56, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 93, 44, 34, 109, 97, 99, 34, 58, 91, 56, 57, 44,
		49, 51, 50, 44, 54, 54, 44, 50, 52, 56, 44, 50, 49, 57, 44, 49, 48, 50, 44, 52, 53, 44, 49,
		57, 57, 44, 56, 50, 44, 50, 51, 56, 44, 49, 54, 55, 44, 49, 49, 51, 44, 49, 52, 56, 44, 50,
		51, 53, 44, 49, 57, 54, 44, 53, 48, 93, 125,
	];
	let old_rec_report = [
		48, 130, 20, 200, 48, 130, 20, 110, 160, 3, 2, 1, 2, 2, 1, 1, 48, 10, 6, 8, 42, 134, 72,
		206, 61, 4, 3, 2, 48, 19, 49, 17, 48, 15, 6, 3, 85, 4, 3, 12, 8, 80, 79, 76, 75, 65, 68,
		69, 88, 48, 30, 23, 13, 50, 50, 48, 57, 50, 54, 49, 57, 51, 48, 49, 55, 90, 23, 13, 50, 50,
		48, 57, 50, 55, 49, 57, 51, 48, 49, 55, 90, 48, 31, 49, 29, 48, 27, 6, 3, 85, 4, 3, 12, 20,
		80, 79, 76, 75, 65, 68, 69, 88, 32, 97, 116, 116, 101, 115, 116, 97, 116, 105, 111, 110,
		48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3,
		66, 0, 4, 189, 239, 23, 177, 124, 141, 170, 154, 217, 213, 43, 16, 96, 91, 67, 84, 255, 77,
		200, 29, 67, 24, 253, 0, 227, 12, 236, 176, 184, 110, 78, 82, 245, 139, 80, 181, 223, 232,
		216, 251, 33, 60, 138, 170, 229, 170, 238, 214, 137, 137, 61, 70, 184, 187, 97, 183, 61,
		24, 172, 203, 63, 43, 148, 8, 163, 130, 19, 165, 48, 130, 19, 161, 48, 130, 19, 157, 6, 9,
		96, 134, 72, 1, 134, 248, 66, 1, 13, 4, 130, 19, 142, 123, 34, 105, 100, 34, 58, 34, 53,
		56, 50, 51, 52, 49, 52, 52, 48, 53, 55, 48, 49, 53, 49, 55, 50, 49, 51, 54, 50, 52, 52, 56,
		53, 51, 52, 53, 48, 56, 50, 53, 50, 55, 50, 55, 57, 34, 44, 34, 116, 105, 109, 101, 115,
		116, 97, 109, 112, 34, 58, 34, 50, 48, 50, 50, 45, 48, 57, 45, 50, 54, 84, 49, 57, 58, 51,
		48, 58, 49, 55, 46, 53, 53, 52, 57, 57, 50, 34, 44, 34, 118, 101, 114, 115, 105, 111, 110,
		34, 58, 52, 44, 34, 105, 115, 118, 69, 110, 99, 108, 97, 118, 101, 81, 117, 111, 116, 101,
		83, 116, 97, 116, 117, 115, 34, 58, 34, 83, 87, 95, 72, 65, 82, 68, 69, 78, 73, 78, 71, 95,
		78, 69, 69, 68, 69, 68, 34, 44, 34, 105, 115, 118, 69, 110, 99, 108, 97, 118, 101, 81, 117,
		111, 116, 101, 66, 111, 100, 121, 34, 58, 91, 50, 44, 48, 44, 49, 44, 48, 44, 55, 53, 44,
		49, 50, 44, 48, 44, 48, 44, 49, 51, 44, 48, 44, 49, 51, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 50, 53, 48, 44, 54, 51, 44, 50, 50, 54, 44, 49, 48, 54, 44, 50, 49, 54, 44, 50, 51,
		50, 44, 57, 54, 44, 53, 55, 44, 51, 49, 44, 50, 56, 44, 49, 54, 52, 44, 52, 55, 44, 55, 51,
		44, 49, 52, 54, 44, 49, 57, 44, 50, 49, 56, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 57,
		44, 49, 57, 44, 50, 44, 55, 44, 50, 53, 53, 44, 49, 50, 56, 44, 54, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 55, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 55, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 54, 50, 44, 49, 56,
		48, 44, 49, 54, 50, 44, 49, 48, 48, 44, 49, 55, 52, 44, 49, 52, 54, 44, 49, 52, 52, 44, 55,
		54, 44, 54, 50, 44, 53, 57, 44, 56, 53, 44, 49, 53, 53, 44, 49, 51, 57, 44, 57, 56, 44, 49,
		57, 55, 44, 50, 51, 51, 44, 49, 48, 52, 44, 50, 49, 56, 44, 49, 50, 50, 44, 50, 48, 54, 44,
		49, 57, 51, 44, 56, 53, 44, 54, 51, 44, 51, 52, 44, 54, 55, 44, 54, 53, 44, 50, 51, 54, 44,
		49, 50, 56, 44, 50, 52, 51, 44, 49, 48, 55, 44, 50, 48, 50, 44, 49, 57, 53, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 57, 53, 44, 49, 56, 51, 44, 49,
		52, 49, 44, 53, 55, 44, 55, 53, 44, 49, 48, 49, 44, 49, 52, 57, 44, 50, 52, 54, 44, 56, 53,
		44, 50, 50, 55, 44, 50, 49, 57, 44, 55, 49, 44, 49, 52, 44, 49, 52, 51, 44, 49, 52, 51, 44,
		55, 57, 44, 50, 44, 50, 48, 57, 44, 49, 50, 55, 44, 49, 54, 53, 44, 49, 49, 55, 44, 50, 48,
		54, 44, 49, 56, 53, 44, 55, 51, 44, 56, 49, 44, 50, 50, 56, 44, 49, 44, 50, 50, 53, 44, 49,
		53, 48, 44, 49, 49, 54, 44, 50, 52, 50, 44, 51, 56, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 53, 54, 44, 56, 49, 44, 49, 57, 52, 44,
		51, 53, 44, 49, 55, 52, 44, 50, 52, 50, 44, 49, 51, 52, 44, 54, 50, 44, 49, 50, 49, 44, 50,
		49, 49, 44, 49, 53, 54, 44, 49, 54, 49, 44, 53, 55, 44, 55, 52, 44, 49, 52, 57, 44, 50, 50,
		49, 44, 49, 52, 54, 44, 50, 51, 52, 44, 50, 48, 52, 44, 50, 57, 44, 50, 53, 52, 44, 56, 52,
		44, 50, 50, 51, 44, 50, 52, 50, 44, 49, 51, 51, 44, 57, 56, 44, 49, 50, 52, 44, 50, 48, 54,
		44, 49, 55, 55, 44, 55, 57, 44, 50, 48, 48, 44, 55, 51, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 93, 44, 34, 101, 112, 105, 100, 80, 115, 101, 117, 100,
		111, 110, 121, 109, 34, 58, 91, 50, 52, 49, 44, 55, 53, 44, 49, 51, 53, 44, 49, 52, 44, 56,
		54, 44, 50, 57, 44, 50, 50, 52, 44, 50, 50, 50, 44, 49, 49, 50, 44, 49, 55, 48, 44, 49, 52,
		56, 44, 50, 48, 54, 44, 49, 49, 50, 44, 55, 48, 44, 50, 49, 52, 44, 53, 55, 44, 49, 49, 48,
		44, 49, 56, 48, 44, 54, 57, 44, 50, 50, 56, 44, 50, 50, 48, 44, 49, 57, 48, 44, 53, 55, 44,
		49, 49, 44, 57, 50, 44, 50, 53, 52, 44, 49, 49, 51, 44, 56, 48, 44, 55, 53, 44, 53, 48, 44,
		57, 51, 44, 53, 50, 44, 50, 51, 54, 44, 54, 52, 44, 49, 50, 44, 52, 51, 44, 52, 44, 52, 57,
		44, 54, 54, 44, 49, 57, 52, 44, 49, 49, 57, 44, 49, 50, 48, 44, 50, 49, 56, 44, 49, 51, 57,
		44, 49, 48, 49, 44, 56, 52, 44, 50, 51, 50, 44, 49, 57, 52, 44, 49, 52, 50, 44, 54, 54, 44,
		50, 52, 56, 44, 54, 50, 44, 49, 53, 57, 44, 49, 56, 44, 56, 57, 44, 52, 55, 44, 54, 56, 44,
		49, 54, 48, 44, 49, 53, 57, 44, 50, 52, 53, 44, 54, 44, 57, 53, 44, 49, 50, 44, 55, 44, 49,
		52, 52, 44, 52, 56, 44, 49, 54, 50, 44, 50, 48, 50, 44, 50, 49, 51, 44, 55, 44, 53, 55, 44,
		51, 55, 44, 49, 50, 53, 44, 49, 52, 56, 44, 49, 48, 55, 44, 50, 53, 49, 44, 49, 54, 52, 44,
		50, 51, 52, 44, 50, 52, 56, 44, 51, 56, 44, 49, 50, 56, 44, 49, 55, 51, 44, 50, 57, 44, 49,
		48, 50, 44, 55, 51, 44, 49, 44, 49, 54, 56, 44, 57, 52, 44, 49, 55, 44, 49, 52, 54, 44, 49,
		57, 55, 44, 50, 48, 54, 44, 52, 50, 44, 51, 53, 44, 49, 51, 51, 44, 54, 54, 44, 49, 50, 55,
		44, 49, 57, 44, 50, 49, 53, 44, 49, 50, 48, 44, 50, 50, 54, 44, 50, 48, 48, 44, 53, 54, 44,
		49, 50, 50, 44, 50, 54, 44, 51, 44, 49, 56, 52, 44, 49, 50, 52, 44, 57, 50, 44, 49, 50, 57,
		44, 49, 48, 54, 44, 50, 48, 54, 44, 50, 52, 52, 44, 49, 44, 50, 49, 48, 44, 49, 52, 53, 44,
		49, 48, 49, 44, 50, 50, 52, 44, 56, 49, 44, 56, 54, 44, 50, 49, 44, 50, 50, 56, 44, 51, 55,
		44, 49, 49, 50, 44, 49, 51, 55, 44, 50, 49, 44, 51, 54, 44, 50, 52, 53, 93, 44, 34, 97,
		100, 118, 105, 115, 111, 114, 121, 85, 82, 76, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47,
		47, 115, 101, 99, 117, 114, 105, 116, 121, 45, 99, 101, 110, 116, 101, 114, 46, 105, 110,
		116, 101, 108, 46, 99, 111, 109, 34, 44, 34, 97, 100, 118, 105, 115, 111, 114, 121, 73, 68,
		115, 34, 58, 91, 34, 73, 78, 84, 69, 76, 45, 83, 65, 45, 48, 48, 51, 51, 52, 34, 93, 125,
		124, 57, 51, 51, 55, 101, 97, 48, 51, 97, 100, 54, 98, 102, 102, 52, 99, 102, 53, 97, 98,
		101, 53, 100, 102, 52, 49, 102, 53, 54, 102, 97, 53, 102, 101, 52, 54, 53, 97, 97, 99, 100,
		51, 48, 102, 98, 56, 98, 50, 53, 98, 100, 97, 56, 99, 100, 57, 53, 56, 99, 52, 49, 99, 50,
		53, 101, 100, 51, 98, 52, 57, 50, 97, 53, 99, 101, 54, 53, 54, 50, 48, 101, 50, 49, 48,
		101, 100, 52, 55, 57, 57, 53, 50, 50, 53, 52, 99, 49, 97, 49, 98, 97, 55, 56, 99, 100, 48,
		56, 100, 54, 54, 55, 55, 56, 102, 98, 55, 52, 102, 52, 51, 53, 51, 50, 57, 99, 53, 101, 98,
		48, 99, 102, 100, 49, 56, 49, 99, 57, 56, 54, 49, 57, 50, 51, 55, 52, 50, 99, 99, 51, 56,
		100, 99, 53, 98, 57, 101, 56, 101, 100, 49, 49, 50, 55, 101, 55, 49, 54, 97, 52, 98, 56,
		57, 97, 48, 49, 102, 100, 56, 48, 101, 55, 52, 53, 48, 55, 99, 49, 48, 54, 56, 49, 102,
		102, 52, 54, 52, 98, 54, 97, 52, 53, 102, 51, 100, 48, 99, 48, 102, 54, 52, 100, 55, 51,
		54, 101, 98, 54, 52, 56, 102, 98, 97, 99, 49, 57, 56, 51, 53, 102, 48, 101, 52, 97, 48, 98,
		102, 53, 102, 55, 51, 101, 57, 100, 55, 51, 55, 52, 97, 101, 53, 101, 97, 50, 55, 57, 57,
		53, 49, 56, 99, 55, 48, 53, 55, 101, 51, 99, 54, 99, 50, 52, 48, 56, 57, 100, 101, 55, 97,
		49, 101, 100, 99, 49, 98, 98, 51, 52, 57, 102, 48, 49, 99, 54, 97, 53, 102, 97, 52, 48, 51,
		54, 102, 51, 98, 55, 54, 98, 102, 98, 57, 57, 57, 57, 101, 57, 53, 101, 49, 49, 55, 57, 97,
		99, 54, 48, 100, 56, 57, 48, 54, 49, 49, 102, 57, 48, 53, 55, 50, 57, 50, 100, 55, 55, 98,
		97, 99, 100, 98, 97, 100, 50, 102, 97, 54, 98, 48, 51, 55, 99, 49, 51, 99, 48, 98, 51, 101,
		48, 98, 98, 50, 49, 54, 49, 101, 50, 54, 51, 56, 54, 98, 101, 48, 55, 48, 56, 56, 53, 56,
		50, 98, 53, 98, 51, 48, 102, 99, 51, 49, 55, 100, 51, 56, 99, 56, 52, 102, 49, 48, 48, 48,
		55, 102, 49, 50, 100, 101, 49, 97, 101, 53, 51, 48, 56, 97, 100, 99, 57, 99, 49, 99, 54,
		49, 57, 48, 54, 101, 97, 99, 49, 50, 55, 52, 56, 49, 55, 48, 100, 57, 99, 98, 101, 48, 101,
		54, 54, 51, 52, 52, 53, 53, 97, 48, 99, 53, 102, 100, 51, 51, 102, 98, 53, 100, 53, 54, 50,
		101, 51, 102, 98, 52, 56, 50, 52, 51, 98, 99, 56, 50, 100, 98, 99, 49, 97, 102, 55, 57,
		100, 54, 53, 52, 55, 55, 102, 100, 99, 53, 56, 54, 48, 56, 50, 57, 124, 51, 48, 56, 50, 48,
		53, 52, 98, 51, 48, 56, 50, 48, 51, 98, 51, 97, 48, 48, 51, 48, 50, 48, 49, 48, 50, 48, 50,
		48, 57, 48, 48, 100, 49, 48, 55, 55, 54, 53, 100, 51, 50, 97, 51, 98, 48, 57, 52, 51, 48,
		48, 100, 48, 54, 48, 57, 50, 97, 56, 54, 52, 56, 56, 54, 102, 55, 48, 100, 48, 49, 48, 49,
		48, 98, 48, 53, 48, 48, 51, 48, 55, 101, 51, 49, 48, 98, 51, 48, 48, 57, 48, 54, 48, 51,
		53, 53, 48, 52, 48, 54, 49, 51, 48, 50, 53, 53, 53, 51, 51, 49, 48, 98, 51, 48, 48, 57, 48,
		54, 48, 51, 53, 53, 48, 52, 48, 56, 48, 99, 48, 50, 52, 51, 52, 49, 51, 49, 49, 52, 51, 48,
		49, 50, 48, 54, 48, 51, 53, 53, 48, 52, 48, 55, 48, 99, 48, 98, 53, 51, 54, 49, 54, 101,
		55, 52, 54, 49, 50, 48, 52, 51, 54, 99, 54, 49, 55, 50, 54, 49, 51, 49, 49, 97, 51, 48, 49,
		56, 48, 54, 48, 51, 53, 53, 48, 52, 48, 97, 48, 99, 49, 49, 52, 57, 54, 101, 55, 52, 54,
		53, 54, 99, 50, 48, 52, 51, 54, 102, 55, 50, 55, 48, 54, 102, 55, 50, 54, 49, 55, 52, 54,
		57, 54, 102, 54, 101, 51, 49, 51, 48, 51, 48, 50, 101, 48, 54, 48, 51, 53, 53, 48, 52, 48,
		51, 48, 99, 50, 55, 52, 57, 54, 101, 55, 52, 54, 53, 54, 99, 50, 48, 53, 51, 52, 55, 53,
		56, 50, 48, 52, 49, 55, 52, 55, 52, 54, 53, 55, 51, 55, 52, 54, 49, 55, 52, 54, 57, 54,
		102, 54, 101, 50, 48, 53, 50, 54, 53, 55, 48, 54, 102, 55, 50, 55, 52, 50, 48, 53, 51, 54,
		57, 54, 55, 54, 101, 54, 57, 54, 101, 54, 55, 50, 48, 52, 51, 52, 49, 51, 48, 50, 48, 49,
		55, 48, 100, 51, 49, 51, 54, 51, 49, 51, 49, 51, 49, 51, 52, 51, 49, 51, 53, 51, 51, 51,
		55, 51, 51, 51, 49, 53, 97, 49, 56, 48, 102, 51, 50, 51, 48, 51, 52, 51, 57, 51, 49, 51,
		50, 51, 51, 51, 49, 51, 50, 51, 51, 51, 53, 51, 57, 51, 53, 51, 57, 53, 97, 51, 48, 55,
		101, 51, 49, 48, 98, 51, 48, 48, 57, 48, 54, 48, 51, 53, 53, 48, 52, 48, 54, 49, 51, 48,
		50, 53, 53, 53, 51, 51, 49, 48, 98, 51, 48, 48, 57, 48, 54, 48, 51, 53, 53, 48, 52, 48, 56,
		48, 99, 48, 50, 52, 51, 52, 49, 51, 49, 49, 52, 51, 48, 49, 50, 48, 54, 48, 51, 53, 53, 48,
		52, 48, 55, 48, 99, 48, 98, 53, 51, 54, 49, 54, 101, 55, 52, 54, 49, 50, 48, 52, 51, 54,
		99, 54, 49, 55, 50, 54, 49, 51, 49, 49, 97, 51, 48, 49, 56, 48, 54, 48, 51, 53, 53, 48, 52,
		48, 97, 48, 99, 49, 49, 52, 57, 54, 101, 55, 52, 54, 53, 54, 99, 50, 48, 52, 51, 54, 102,
		55, 50, 55, 48, 54, 102, 55, 50, 54, 49, 55, 52, 54, 57, 54, 102, 54, 101, 51, 49, 51, 48,
		51, 48, 50, 101, 48, 54, 48, 51, 53, 53, 48, 52, 48, 51, 48, 99, 50, 55, 52, 57, 54, 101,
		55, 52, 54, 53, 54, 99, 50, 48, 53, 51, 52, 55, 53, 56, 50, 48, 52, 49, 55, 52, 55, 52, 54,
		53, 55, 51, 55, 52, 54, 49, 55, 52, 54, 57, 54, 102, 54, 101, 50, 48, 53, 50, 54, 53, 55,
		48, 54, 102, 55, 50, 55, 52, 50, 48, 53, 51, 54, 57, 54, 55, 54, 101, 54, 57, 54, 101, 54,
		55, 50, 48, 52, 51, 52, 49, 51, 48, 56, 50, 48, 49, 97, 50, 51, 48, 48, 100, 48, 54, 48,
		57, 50, 97, 56, 54, 52, 56, 56, 54, 102, 55, 48, 100, 48, 49, 48, 49, 48, 49, 48, 53, 48,
		48, 48, 51, 56, 50, 48, 49, 56, 102, 48, 48, 51, 48, 56, 50, 48, 49, 56, 97, 48, 50, 56,
		50, 48, 49, 56, 49, 48, 48, 57, 102, 51, 99, 54, 52, 55, 101, 98, 53, 55, 55, 51, 99, 98,
		98, 53, 49, 50, 100, 50, 55, 51, 50, 99, 48, 100, 55, 52, 49, 53, 101, 98, 98, 53, 53, 97,
		48, 102, 97, 57, 101, 100, 101, 50, 101, 54, 52, 57, 49, 57, 57, 101, 54, 56, 50, 49, 100,
		98, 57, 49, 48, 100, 53, 51, 49, 55, 55, 51, 55, 48, 57, 55, 55, 52, 54, 54, 97, 54, 97,
		53, 101, 52, 55, 56, 54, 99, 99, 100, 50, 100, 100, 101, 98, 100, 52, 49, 52, 57, 100, 54,
		97, 50, 102, 54, 51, 50, 53, 53, 50, 57, 100, 100, 49, 48, 99, 99, 57, 56, 55, 51, 55, 98,
		48, 55, 55, 57, 99, 49, 97, 48, 55, 101, 50, 57, 99, 52, 55, 97, 49, 97, 101, 48, 48, 52,
		57, 52, 56, 52, 55, 54, 99, 52, 56, 57, 102, 52, 53, 97, 53, 97, 49, 53, 100, 55, 97, 99,
		56, 101, 99, 99, 54, 97, 99, 99, 54, 52, 53, 97, 100, 98, 52, 51, 100, 56, 55, 54, 55, 57,
		100, 102, 53, 57, 99, 48, 57, 51, 98, 99, 53, 97, 50, 101, 57, 54, 57, 54, 99, 53, 52, 55,
		56, 53, 52, 49, 98, 57, 55, 57, 101, 55, 53, 52, 98, 53, 55, 51, 57, 49, 52, 98, 101, 53,
		53, 100, 51, 50, 102, 102, 52, 99, 48, 57, 100, 100, 102, 50, 55, 50, 49, 57, 57, 51, 52,
		99, 100, 57, 57, 48, 53, 50, 55, 98, 51, 102, 57, 50, 101, 100, 55, 56, 102, 98, 102, 50,
		57, 50, 52, 54, 97, 98, 101, 99, 98, 55, 49, 50, 52, 48, 101, 102, 51, 57, 99, 50, 100, 55,
		49, 48, 55, 98, 52, 52, 55, 53, 52, 53, 97, 55, 102, 102, 98, 49, 48, 101, 98, 48, 54, 48,
		97, 54, 56, 97, 57, 56, 53, 56, 48, 50, 49, 57, 101, 51, 54, 57, 49, 48, 57, 53, 50, 54,
		56, 51, 56, 57, 50, 100, 54, 97, 53, 101, 50, 97, 56, 48, 56, 48, 51, 49, 57, 51, 101, 52,
		48, 55, 53, 51, 49, 52, 48, 52, 101, 51, 54, 98, 51, 49, 53, 54, 50, 51, 55, 57, 57, 97,
		97, 56, 50, 53, 48, 55, 52, 52, 48, 57, 55, 53, 52, 97, 50, 100, 102, 101, 56, 102, 53, 97,
		102, 100, 53, 102, 101, 54, 51, 49, 101, 49, 102, 99, 50, 97, 102, 51, 56, 48, 56, 57, 48,
		54, 102, 50, 56, 97, 55, 57, 48, 100, 57, 100, 100, 57, 102, 101, 48, 54, 48, 57, 51, 57,
		98, 49, 50, 53, 55, 57, 48, 99, 53, 56, 48, 53, 100, 48, 51, 55, 100, 102, 53, 54, 97, 57,
		57, 53, 51, 49, 98, 57, 54, 100, 101, 54, 57, 100, 101, 51, 51, 101, 100, 50, 50, 54, 99,
		99, 49, 50, 48, 55, 100, 49, 48, 52, 50, 98, 53, 99, 57, 97, 98, 55, 102, 52, 48, 52, 102,
		99, 55, 49, 49, 99, 48, 102, 101, 52, 55, 54, 57, 102, 98, 57, 53, 55, 56, 98, 49, 100, 99,
		48, 101, 99, 52, 54, 57, 101, 97, 49, 97, 50, 53, 101, 48, 102, 102, 57, 57, 49, 52, 56,
		56, 54, 101, 102, 50, 54, 57, 57, 98, 50, 51, 53, 98, 98, 52, 56, 52, 55, 100, 100, 54,
		102, 102, 52, 48, 98, 54, 48, 54, 101, 54, 49, 55, 48, 55, 57, 51, 99, 50, 102, 98, 57, 56,
		98, 51, 49, 52, 53, 56, 55, 102, 57, 99, 102, 100, 50, 53, 55, 51, 54, 50, 100, 102, 101,
		97, 98, 49, 48, 98, 51, 98, 100, 50, 100, 57, 55, 54, 55, 51, 97, 49, 97, 52, 98, 100, 52,
		52, 99, 52, 53, 51, 97, 97, 102, 52, 55, 102, 99, 49, 102, 50, 100, 51, 100, 48, 102, 51,
		56, 52, 102, 55, 52, 97, 48, 54, 102, 56, 57, 99, 48, 56, 57, 102, 48, 100, 97, 54, 99,
		100, 98, 55, 102, 99, 101, 101, 101, 56, 99, 57, 56, 50, 49, 97, 56, 101, 53, 52, 102, 50,
		53, 99, 48, 52, 49, 54, 100, 49, 56, 99, 52, 54, 56, 51, 57, 97, 53, 102, 56, 48, 49, 50,
		102, 98, 100, 100, 51, 100, 99, 55, 52, 100, 50, 53, 54, 50, 55, 57, 97, 100, 99, 50, 99,
		48, 100, 53, 53, 97, 102, 102, 54, 102, 48, 54, 50, 50, 52, 50, 53, 100, 49, 98, 48, 50,
		48, 51, 48, 49, 48, 48, 48, 49, 97, 51, 56, 49, 99, 57, 51, 48, 56, 49, 99, 54, 51, 48, 54,
		48, 48, 54, 48, 51, 53, 53, 49, 100, 49, 102, 48, 52, 53, 57, 51, 48, 53, 55, 51, 48, 53,
		53, 97, 48, 53, 51, 97, 48, 53, 49, 56, 54, 52, 102, 54, 56, 55, 52, 55, 52, 55, 48, 51,
		97, 50, 102, 50, 102, 55, 52, 55, 50, 55, 53, 55, 51, 55, 52, 54, 53, 54, 52, 55, 51, 54,
		53, 55, 50, 55, 54, 54, 57, 54, 51, 54, 53, 55, 51, 50, 101, 54, 57, 54, 101, 55, 52, 54,
		53, 54, 99, 50, 101, 54, 51, 54, 102, 54, 100, 50, 102, 54, 51, 54, 102, 54, 101, 55, 52,
		54, 53, 54, 101, 55, 52, 50, 102, 52, 51, 53, 50, 52, 99, 50, 102, 53, 51, 52, 55, 53, 56,
		50, 102, 52, 49, 55, 52, 55, 52, 54, 53, 55, 51, 55, 52, 54, 49, 55, 52, 54, 57, 54, 102,
		54, 101, 53, 50, 54, 53, 55, 48, 54, 102, 55, 50, 55, 52, 53, 51, 54, 57, 54, 55, 54, 101,
		54, 57, 54, 101, 54, 55, 52, 51, 52, 49, 50, 101, 54, 51, 55, 50, 54, 99, 51, 48, 49, 100,
		48, 54, 48, 51, 53, 53, 49, 100, 48, 101, 48, 52, 49, 54, 48, 52, 49, 52, 55, 56, 52, 51,
		55, 98, 55, 54, 97, 54, 55, 101, 98, 99, 100, 48, 97, 102, 55, 101, 52, 50, 51, 55, 101,
		98, 51, 53, 55, 99, 51, 98, 56, 55, 48, 49, 53, 49, 51, 99, 51, 48, 49, 102, 48, 54, 48,
		51, 53, 53, 49, 100, 50, 51, 48, 52, 49, 56, 51, 48, 49, 54, 56, 48, 49, 52, 55, 56, 52,
		51, 55, 98, 55, 54, 97, 54, 55, 101, 98, 99, 100, 48, 97, 102, 55, 101, 52, 50, 51, 55,
		101, 98, 51, 53, 55, 99, 51, 98, 56, 55, 48, 49, 53, 49, 51, 99, 51, 48, 48, 101, 48, 54,
		48, 51, 53, 53, 49, 100, 48, 102, 48, 49, 48, 49, 102, 102, 48, 52, 48, 52, 48, 51, 48, 50,
		48, 49, 48, 54, 51, 48, 49, 50, 48, 54, 48, 51, 53, 53, 49, 100, 49, 51, 48, 49, 48, 49,
		102, 102, 48, 52, 48, 56, 51, 48, 48, 54, 48, 49, 48, 49, 102, 102, 48, 50, 48, 49, 48, 48,
		51, 48, 48, 100, 48, 54, 48, 57, 50, 97, 56, 54, 52, 56, 56, 54, 102, 55, 48, 100, 48, 49,
		48, 49, 48, 98, 48, 53, 48, 48, 48, 51, 56, 50, 48, 49, 56, 49, 48, 48, 55, 56, 53, 102,
		50, 100, 54, 48, 99, 53, 99, 56, 48, 97, 102, 52, 50, 97, 55, 57, 55, 54, 49, 48, 50, 49,
		51, 57, 49, 53, 100, 97, 56, 50, 99, 57, 98, 50, 57, 101, 56, 57, 101, 48, 57, 48, 50, 97,
		50, 53, 97, 54, 99, 55, 53, 98, 49, 54, 48, 57, 49, 99, 54, 56, 97, 98, 50, 48, 52, 97, 97,
		101, 55, 49, 49, 56, 56, 57, 52, 57, 50, 99, 55, 101, 49, 101, 51, 50, 48, 57, 49, 49, 52,
		53, 53, 97, 56, 102, 99, 49, 51, 52, 52, 50, 51, 49, 50, 101, 55, 55, 97, 54, 51, 57, 57,
		52, 100, 57, 57, 55, 57, 53, 99, 56, 101, 97, 52, 53, 55, 54, 56, 50, 51, 99, 101, 97, 56,
		97, 100, 49, 101, 49, 57, 49, 99, 102, 97, 56, 54, 50, 102, 97, 98, 56, 97, 57, 51, 50,
		100, 51, 100, 57, 98, 48, 53, 51, 53, 97, 48, 55, 48, 50, 100, 48, 53, 53, 53, 102, 55, 52,
		101, 53, 50, 48, 101, 51, 48, 51, 51, 48, 102, 51, 51, 52, 56, 48, 101, 55, 97, 100, 99,
		57, 100, 55, 99, 56, 49, 101, 50, 48, 55, 48, 51, 49, 52, 50, 98, 102, 48, 48, 99, 53, 50,
		56, 97, 56, 48, 98, 52, 54, 51, 51, 56, 49, 102, 100, 54, 48, 50, 97, 56, 50, 99, 55, 48,
		51, 53, 50, 56, 49, 97, 97, 101, 53, 57, 53, 54, 50, 99, 99, 98, 53, 51, 51, 52, 101, 97,
		56, 57, 48, 51, 101, 54, 53, 48, 98, 48, 49, 48, 54, 56, 49, 102, 53, 99, 101, 56, 101, 98,
		54, 50, 101, 97, 99, 57, 99, 52, 49, 52, 57, 56, 56, 50, 52, 51, 97, 101, 99, 57, 50, 102,
		50, 53, 98, 102, 49, 51, 99, 100, 102, 102, 55, 101, 98, 99, 99, 50, 57, 56, 101, 101, 53,
		49, 98, 98, 97, 53, 97, 51, 53, 51, 56, 98, 54, 54, 98, 50, 54, 99, 98, 99, 52, 53, 97, 53,
		49, 100, 101, 48, 48, 51, 99, 97, 100, 51, 48, 54, 53, 51, 49, 97, 100, 55, 99, 102, 53,
		100, 52, 101, 102, 48, 102, 56, 56, 48, 53, 100, 49, 98, 57, 49, 51, 51, 100, 50, 52, 49,
		51, 53, 97, 98, 51, 99, 52, 54, 52, 49, 97, 50, 102, 56, 56, 48, 56, 51, 52, 57, 100, 55,
		51, 51, 51, 50, 57, 53, 101, 48, 101, 55, 54, 101, 101, 52, 98, 99, 53, 50, 50, 55, 50, 51,
		50, 54, 50, 56, 101, 102, 97, 56, 48, 100, 55, 57, 100, 57, 50, 97, 98, 52, 101, 51, 100,
		49, 49, 50, 48, 102, 51, 102, 98, 53, 97, 100, 49, 49, 57, 99, 100, 56, 100, 53, 52, 52,
		97, 97, 49, 100, 52, 97, 54, 56, 54, 53, 101, 54, 98, 53, 55, 98, 101, 97, 99, 53, 55, 55,
		49, 51, 48, 55, 101, 50, 101, 51, 99, 98, 57, 48, 55, 48, 100, 97, 52, 55, 98, 52, 98, 102,
		99, 56, 56, 54, 57, 101, 48, 49, 52, 49, 51, 101, 97, 48, 57, 51, 53, 52, 49, 100, 101, 56,
		97, 55, 57, 50, 56, 49, 49, 98, 55, 52, 54, 51, 54, 99, 53, 101, 57, 49, 52, 53, 50, 99,
		102, 48, 99, 101, 101, 53, 57, 102, 50, 102, 98, 52, 48, 52, 97, 99, 100, 48, 98, 99, 53,
		56, 52, 99, 98, 57, 99, 56, 51, 53, 52, 48, 52, 55, 51, 52, 99, 48, 101, 55, 101, 99, 54,
		54, 48, 53, 99, 100, 102, 99, 102, 50, 102, 102, 52, 51, 57, 98, 54, 100, 52, 55, 49, 57,
		102, 55, 48, 50, 102, 48, 101, 48, 99, 51, 102, 97, 48, 52, 102, 100, 98, 49, 50, 97, 54,
		99, 98, 50, 97, 100, 49, 97, 98, 49, 99, 57, 97, 102, 49, 102, 56, 102, 52, 99, 51, 97, 48,
		56, 101, 100, 100, 55, 50, 97, 51, 50, 98, 48, 98, 98, 53, 100, 48, 97, 100, 50, 53, 54,
		102, 102, 100, 49, 53, 57, 97, 54, 56, 51, 98, 50, 97, 53, 97, 49, 102, 49, 100, 49, 49,
		102, 97, 54, 50, 53, 51, 50, 102, 48, 51, 100, 55, 53, 52, 99, 97, 101, 102, 48, 100, 97,
		53, 55, 51, 53, 97, 49, 101, 53, 97, 56, 56, 52, 99, 55, 101, 56, 57, 100, 57, 49, 50, 49,
		56, 99, 57, 100, 55, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 3, 72, 0, 48, 69, 2, 32,
		29, 18, 169, 94, 193, 177, 244, 91, 175, 2, 74, 5, 54, 234, 149, 49, 123, 68, 22, 168, 69,
		151, 8, 65, 78, 239, 217, 88, 68, 219, 81, 52, 2, 33, 0, 166, 44, 166, 191, 114, 6, 75, 8,
		68, 45, 52, 71, 155, 135, 133, 7, 189, 166, 210, 246, 140, 209, 46, 179, 115, 247, 195, 70,
		104, 52, 51, 150,
	];
	let rec_report = [
		48, 130, 16, 150, 48, 130, 16, 60, 160, 3, 2, 1, 2, 2, 1, 1, 48, 10, 6, 8, 42, 134, 72,
		206, 61, 4, 3, 2, 48, 19, 49, 17, 48, 15, 6, 3, 85, 4, 3, 12, 8, 80, 79, 76, 75, 65, 68,
		69, 88, 48, 30, 23, 13, 50, 50, 48, 57, 50, 54, 49, 57, 53, 56, 50, 57, 90, 23, 13, 50, 50,
		48, 57, 50, 55, 49, 57, 53, 56, 50, 57, 90, 48, 31, 49, 29, 48, 27, 6, 3, 85, 4, 3, 12, 20,
		80, 79, 76, 75, 65, 68, 69, 88, 32, 97, 116, 116, 101, 115, 116, 97, 116, 105, 111, 110,
		48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3,
		66, 0, 4, 74, 197, 252, 182, 9, 40, 45, 210, 200, 33, 35, 25, 136, 206, 23, 21, 254, 184,
		144, 172, 194, 244, 214, 238, 178, 122, 111, 42, 33, 146, 228, 21, 89, 228, 181, 169, 129,
		252, 6, 8, 111, 211, 21, 38, 170, 173, 193, 185, 134, 202, 100, 89, 235, 25, 40, 232, 46,
		126, 152, 94, 178, 234, 204, 251, 163, 130, 15, 115, 48, 130, 15, 111, 48, 130, 15, 107, 6,
		9, 96, 134, 72, 1, 134, 248, 66, 1, 13, 4, 130, 15, 92, 123, 34, 105, 100, 34, 58, 34, 50,
		53, 57, 49, 55, 49, 51, 49, 53, 53, 56, 52, 57, 55, 56, 53, 50, 55, 50, 53, 52, 48, 53, 48,
		49, 52, 55, 55, 53, 50, 54, 51, 55, 54, 53, 48, 57, 51, 49, 34, 44, 34, 116, 105, 109, 101,
		115, 116, 97, 109, 112, 34, 58, 34, 50, 48, 50, 50, 45, 48, 57, 45, 50, 54, 84, 49, 57, 58,
		53, 56, 58, 50, 57, 46, 51, 51, 54, 50, 50, 48, 34, 44, 34, 118, 101, 114, 115, 105, 111,
		110, 34, 58, 52, 44, 34, 105, 115, 118, 69, 110, 99, 108, 97, 118, 101, 81, 117, 111, 116,
		101, 83, 116, 97, 116, 117, 115, 34, 58, 34, 83, 87, 95, 72, 65, 82, 68, 69, 78, 73, 78,
		71, 95, 78, 69, 69, 68, 69, 68, 34, 44, 34, 105, 115, 118, 69, 110, 99, 108, 97, 118, 101,
		81, 117, 111, 116, 101, 66, 111, 100, 121, 34, 58, 91, 50, 44, 48, 44, 49, 44, 48, 44, 55,
		53, 44, 49, 50, 44, 48, 44, 48, 44, 49, 51, 44, 48, 44, 49, 51, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 50, 53, 48, 44, 54, 51, 44, 50, 50, 54, 44, 49, 48, 54, 44, 50, 49, 54, 44,
		50, 51, 50, 44, 57, 54, 44, 53, 55, 44, 51, 49, 44, 50, 56, 44, 49, 54, 52, 44, 52, 55, 44,
		55, 51, 44, 49, 52, 54, 44, 49, 57, 44, 50, 49, 56, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		49, 57, 44, 49, 57, 44, 50, 44, 55, 44, 50, 53, 53, 44, 49, 50, 56, 44, 54, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 55, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 55, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 54, 50, 44,
		49, 56, 48, 44, 49, 54, 50, 44, 49, 48, 48, 44, 49, 55, 52, 44, 49, 52, 54, 44, 49, 52, 52,
		44, 55, 54, 44, 54, 50, 44, 53, 57, 44, 56, 53, 44, 49, 53, 53, 44, 49, 51, 57, 44, 57, 56,
		44, 49, 57, 55, 44, 50, 51, 51, 44, 49, 48, 52, 44, 50, 49, 56, 44, 49, 50, 50, 44, 50, 48,
		54, 44, 49, 57, 51, 44, 56, 53, 44, 54, 51, 44, 51, 52, 44, 54, 55, 44, 54, 53, 44, 50, 51,
		54, 44, 49, 50, 56, 44, 50, 52, 51, 44, 49, 48, 55, 44, 50, 48, 50, 44, 49, 57, 53, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 57, 53, 44, 49, 56, 51,
		44, 49, 52, 49, 44, 53, 55, 44, 55, 53, 44, 49, 48, 49, 44, 49, 52, 57, 44, 50, 52, 54, 44,
		56, 53, 44, 50, 50, 55, 44, 50, 49, 57, 44, 55, 49, 44, 49, 52, 44, 49, 52, 51, 44, 49, 52,
		51, 44, 55, 57, 44, 50, 44, 50, 48, 57, 44, 49, 50, 55, 44, 49, 54, 53, 44, 49, 49, 55, 44,
		50, 48, 54, 44, 49, 56, 53, 44, 55, 51, 44, 56, 49, 44, 50, 50, 56, 44, 49, 44, 50, 50, 53,
		44, 49, 53, 48, 44, 49, 49, 54, 44, 50, 52, 50, 44, 51, 56, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 52, 44, 49, 52, 51, 44, 50,
		50, 55, 44, 49, 51, 48, 44, 49, 53, 51, 44, 51, 56, 44, 49, 54, 54, 44, 49, 49, 56, 44, 49,
		48, 49, 44, 50, 53, 53, 44, 49, 51, 49, 44, 49, 49, 48, 44, 49, 50, 44, 51, 52, 44, 50, 51,
		52, 44, 49, 56, 56, 44, 49, 54, 52, 44, 49, 53, 44, 49, 48, 49, 44, 50, 48, 55, 44, 50, 49,
		55, 44, 57, 55, 44, 55, 57, 44, 49, 53, 56, 44, 51, 44, 49, 49, 52, 44, 56, 55, 44, 50, 48,
		54, 44, 54, 55, 44, 51, 44, 50, 52, 54, 44, 49, 49, 50, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48,
		44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44,
		48, 44, 48, 44, 48, 44, 48, 44, 48, 93, 44, 34, 101, 112, 105, 100, 80, 115, 101, 117, 100,
		111, 110, 121, 109, 34, 58, 91, 50, 52, 49, 44, 55, 53, 44, 49, 51, 53, 44, 49, 52, 44, 56,
		54, 44, 50, 57, 44, 50, 50, 52, 44, 50, 50, 50, 44, 49, 49, 50, 44, 49, 55, 48, 44, 49, 52,
		56, 44, 50, 48, 54, 44, 49, 49, 50, 44, 55, 48, 44, 50, 49, 52, 44, 53, 55, 44, 49, 49, 48,
		44, 49, 56, 48, 44, 54, 57, 44, 50, 50, 56, 44, 50, 50, 48, 44, 49, 57, 48, 44, 53, 55, 44,
		49, 49, 44, 57, 50, 44, 50, 53, 52, 44, 49, 49, 51, 44, 56, 48, 44, 55, 53, 44, 53, 48, 44,
		57, 51, 44, 53, 50, 44, 50, 51, 54, 44, 54, 52, 44, 49, 50, 44, 52, 51, 44, 52, 44, 52, 57,
		44, 54, 54, 44, 49, 57, 52, 44, 49, 49, 57, 44, 49, 50, 48, 44, 50, 49, 56, 44, 49, 51, 57,
		44, 49, 48, 49, 44, 56, 52, 44, 50, 51, 50, 44, 49, 57, 52, 44, 49, 52, 50, 44, 54, 54, 44,
		50, 52, 56, 44, 54, 50, 44, 49, 53, 57, 44, 49, 56, 44, 56, 57, 44, 52, 55, 44, 54, 56, 44,
		49, 54, 48, 44, 49, 53, 57, 44, 50, 52, 53, 44, 54, 44, 57, 53, 44, 49, 50, 44, 55, 44, 49,
		52, 52, 44, 52, 56, 44, 49, 54, 50, 44, 50, 48, 50, 44, 50, 49, 51, 44, 55, 44, 53, 55, 44,
		51, 55, 44, 49, 50, 53, 44, 49, 52, 56, 44, 49, 48, 55, 44, 50, 53, 49, 44, 49, 54, 52, 44,
		50, 51, 52, 44, 50, 52, 56, 44, 51, 56, 44, 49, 50, 56, 44, 49, 55, 51, 44, 50, 57, 44, 49,
		48, 50, 44, 55, 51, 44, 49, 44, 49, 54, 56, 44, 57, 52, 44, 49, 55, 44, 49, 52, 54, 44, 49,
		57, 55, 44, 50, 48, 54, 44, 52, 50, 44, 51, 53, 44, 49, 51, 51, 44, 54, 54, 44, 49, 50, 55,
		44, 49, 57, 44, 50, 49, 53, 44, 49, 50, 48, 44, 50, 50, 54, 44, 50, 48, 48, 44, 53, 54, 44,
		49, 50, 50, 44, 50, 54, 44, 51, 44, 49, 56, 52, 44, 49, 50, 52, 44, 57, 50, 44, 49, 50, 57,
		44, 49, 48, 54, 44, 50, 48, 54, 44, 50, 52, 52, 44, 49, 44, 50, 49, 48, 44, 49, 52, 53, 44,
		49, 48, 49, 44, 50, 50, 52, 44, 56, 49, 44, 56, 54, 44, 50, 49, 44, 50, 50, 56, 44, 51, 55,
		44, 49, 49, 50, 44, 49, 51, 55, 44, 50, 49, 44, 51, 54, 44, 50, 52, 53, 93, 44, 34, 97,
		100, 118, 105, 115, 111, 114, 121, 85, 82, 76, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47,
		47, 115, 101, 99, 117, 114, 105, 116, 121, 45, 99, 101, 110, 116, 101, 114, 46, 105, 110,
		116, 101, 108, 46, 99, 111, 109, 34, 44, 34, 97, 100, 118, 105, 115, 111, 114, 121, 73, 68,
		115, 34, 58, 91, 34, 73, 78, 84, 69, 76, 45, 83, 65, 45, 48, 48, 51, 51, 52, 34, 93, 125,
		124, 75, 47, 78, 82, 53, 122, 78, 77, 68, 97, 90, 97, 97, 84, 118, 100, 83, 109, 78, 56,
		118, 100, 66, 102, 71, 103, 117, 76, 85, 88, 118, 47, 115, 122, 67, 75, 104, 99, 100, 103,
		97, 120, 57, 90, 73, 122, 73, 99, 54, 79, 55, 118, 121, 97, 122, 113, 70, 50, 109, 85, 120,
		76, 83, 117, 112, 107, 76, 50, 108, 83, 117, 110, 98, 65, 86, 103, 107, 86, 107, 57, 109,
		102, 105, 113, 115, 102, 122, 51, 120, 54, 109, 65, 72, 105, 102, 69, 67, 65, 115, 79, 118,
		51, 75, 68, 57, 105, 67, 121, 78, 108, 80, 68, 53, 88, 52, 80, 103, 77, 110, 47, 48, 88,
		85, 71, 87, 66, 78, 81, 112, 79, 101, 65, 115, 67, 56, 50, 77, 80, 114, 43, 52, 66, 121,
		119, 48, 115, 108, 66, 74, 86, 85, 118, 100, 97, 87, 100, 86, 69, 78, 116, 57, 55, 83, 98,
		109, 75, 103, 106, 100, 105, 85, 52, 72, 72, 101, 47, 76, 88, 89, 81, 56, 98, 65, 47, 47,
		105, 90, 71, 68, 66, 122, 107, 107, 73, 114, 54, 122, 76, 74, 81, 85, 69, 107, 116, 69, 97,
		121, 71, 121, 110, 90, 115, 97, 55, 83, 80, 86, 77, 116, 66, 77, 86, 55, 87, 113, 98, 99,
		109, 57, 81, 66, 104, 82, 83, 106, 87, 106, 97, 53, 81, 108, 118, 112, 83, 99, 99, 84, 86,
		88, 81, 43, 103, 55, 118, 67, 98, 120, 108, 104, 79, 117, 113, 67, 72, 110, 71, 106, 73,
		111, 105, 74, 121, 76, 66, 97, 116, 80, 85, 88, 56, 50, 122, 67, 89, 66, 72, 101, 114, 51,
		115, 57, 86, 84, 43, 49, 84, 87, 55, 119, 114, 73, 108, 116, 121, 72, 119, 56, 48, 102,
		116, 65, 85, 57, 50, 113, 107, 48, 80, 76, 113, 118, 47, 115, 50, 101, 84, 65, 112, 81, 89,
		119, 110, 87, 89, 50, 57, 75, 53, 97, 109, 118, 81, 61, 61, 124, 77, 73, 73, 70, 83, 122,
		67, 67, 65, 55, 79, 103, 65, 119, 73, 66, 65, 103, 73, 74, 65, 78, 69, 72, 100, 108, 48,
		121, 111, 55, 67, 85, 77, 65, 48, 71, 67, 83, 113, 71, 83, 73, 98, 51, 68, 81, 69, 66, 67,
		119, 85, 65, 77, 72, 52, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 65, 108,
		86, 84, 77, 81, 115, 119, 67, 81, 89, 68, 86, 81, 81, 73, 68, 65, 74, 68, 81, 84, 69, 85,
		77, 66, 73, 71, 65, 49, 85, 69, 66, 119, 119, 76, 85, 50, 70, 117, 100, 71, 69, 103, 81,
		50, 120, 104, 99, 109, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111, 77, 69, 85,
		108, 117, 100, 71, 86, 115, 73, 69, 78, 118, 99, 110, 66, 118, 99, 109, 70, 48, 97, 87, 57,
		117, 77, 84, 65, 119, 76, 103, 89, 68, 86, 81, 81, 68, 68, 67, 100, 74, 98, 110, 82, 108,
		98, 67, 66, 84, 82, 49, 103, 103, 81, 88, 82, 48, 90, 88, 78, 48, 89, 88, 82, 112, 98, 50,
		52, 103, 85, 109, 86, 119, 98, 51, 74, 48, 73, 70, 78, 112, 90, 50, 53, 112, 98, 109, 99,
		103, 81, 48, 69, 119, 73, 66, 99, 78, 77, 84, 89, 120, 77, 84, 69, 48, 77, 84, 85, 122, 78,
		122, 77, 120, 87, 104, 103, 80, 77, 106, 65, 48, 79, 84, 69, 121, 77, 122, 69, 121, 77,
		122, 85, 53, 78, 84, 108, 97, 77, 72, 52, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65,
		89, 84, 65, 108, 86, 84, 77, 81, 115, 119, 67, 81, 89, 68, 86, 81, 81, 73, 68, 65, 74, 68,
		81, 84, 69, 85, 77, 66, 73, 71, 65, 49, 85, 69, 66, 119, 119, 76, 85, 50, 70, 117, 100, 71,
		69, 103, 81, 50, 120, 104, 99, 109, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111,
		77, 69, 85, 108, 117, 100, 71, 86, 115, 73, 69, 78, 118, 99, 110, 66, 118, 99, 109, 70, 48,
		97, 87, 57, 117, 77, 84, 65, 119, 76, 103, 89, 68, 86, 81, 81, 68, 68, 67, 100, 74, 98,
		110, 82, 108, 98, 67, 66, 84, 82, 49, 103, 103, 81, 88, 82, 48, 90, 88, 78, 48, 89, 88, 82,
		112, 98, 50, 52, 103, 85, 109, 86, 119, 98, 51, 74, 48, 73, 70, 78, 112, 90, 50, 53, 112,
		98, 109, 99, 103, 81, 48, 69, 119, 103, 103, 71, 105, 77, 65, 48, 71, 67, 83, 113, 71, 83,
		73, 98, 51, 68, 81, 69, 66, 65, 81, 85, 65, 65, 52, 73, 66, 106, 119, 65, 119, 103, 103,
		71, 75, 65, 111, 73, 66, 103, 81, 67, 102, 80, 71, 82, 43, 116, 88, 99, 56, 117, 49, 69,
		116, 74, 122, 76, 65, 49, 48, 70, 101, 117, 49, 87, 103, 43, 112, 55, 101, 76, 109, 83, 82,
		109, 101, 97, 67, 72, 98, 107, 81, 49, 84, 70, 51, 78, 119, 108, 51, 82, 109, 112, 113, 88,
		107, 101, 71, 122, 78, 76, 100, 54, 57, 81, 85, 110, 87, 111, 118, 89, 121, 86, 83, 110,
		100, 69, 77, 121, 89, 99, 51, 115, 72, 101, 99, 71, 103, 102, 105, 110, 69, 101, 104, 114,
		103, 66, 74, 83, 69, 100, 115, 83, 74, 57, 70, 112, 97, 70, 100, 101, 115, 106, 115, 120,
		113, 122, 71, 82, 97, 50, 48, 80, 89, 100, 110, 110, 102, 87, 99, 67, 84, 118, 70, 111,
		117, 108, 112, 98, 70, 82, 52, 86, 66, 117, 88, 110, 110, 86, 76, 86, 122, 107, 85, 118,
		108, 88, 84, 76, 47, 84, 65, 110, 100, 56, 110, 73, 90, 107, 48, 122, 90, 107, 70, 74, 55,
		80, 53, 76, 116, 101, 80, 118, 121, 107, 107, 97, 114, 55, 76, 99, 83, 81, 79, 56, 53, 119,
		116, 99, 81, 101, 48, 82, 49, 82, 97, 102, 47, 115, 81, 54, 119, 89, 75, 97, 75, 109, 70,
		103, 67, 71, 101, 78, 112, 69, 74, 85, 109, 103, 52, 107, 116, 97, 108, 52, 113, 103, 73,
		65, 120, 107, 43, 81, 72, 85, 120, 81, 69, 52, 50, 115, 120, 86, 105, 78, 53, 109, 113,
		103, 108, 66, 48, 81, 74, 100, 85, 111, 116, 47, 111, 57, 97, 47, 86, 47, 109, 77, 101, 72,
		56, 75, 118, 79, 65, 105, 81, 98, 121, 105, 110, 107, 78, 110, 100, 110, 43, 66, 103, 107,
		53, 115, 83, 86, 53, 68, 70, 103, 70, 48, 68, 102, 102, 86, 113, 109, 86, 77, 98, 108, 116,
		53, 112, 51, 106, 80, 116, 73, 109, 122, 66, 73, 72, 48, 81, 81, 114, 88, 74, 113, 51, 57,
		65, 84, 56, 99, 82, 119, 80, 53, 72, 97, 102, 117, 86, 101, 76, 72, 99, 68, 115, 82, 112,
		54, 104, 111, 108, 52, 80, 43, 90, 70, 73, 104, 117, 56, 109, 109, 98, 73, 49, 117, 48,
		104, 72, 51, 87, 47, 48, 67, 50, 66, 117, 89, 88, 66, 53, 80, 67, 43, 53, 105, 122, 70, 70,
		104, 47, 110, 80, 48, 108, 99, 50, 76, 102, 54, 114, 69, 76, 79, 57, 76, 90, 100, 110, 79,
		104, 112, 76, 49, 69, 120, 70, 79, 113, 57, 72, 47, 66, 56, 116, 80, 81, 56, 52, 84, 51,
		83, 103, 98, 52, 110, 65, 105, 102, 68, 97, 98, 78, 116, 47, 122, 117, 54, 77, 109, 67, 71,
		111, 53, 85, 56, 108, 119, 69, 70, 116, 71, 77, 82, 111, 79, 97, 88, 52, 65, 83, 43, 57,
		48, 57, 120, 48, 48, 108, 89, 110, 109, 116, 119, 115, 68, 86, 87, 118, 57, 118, 66, 105,
		74, 67, 88, 82, 115, 67, 65, 119, 69, 65, 65, 97, 79, 66, 121, 84, 67, 66, 120, 106, 66,
		103, 66, 103, 78, 86, 72, 82, 56, 69, 87, 84, 66, 88, 77, 70, 87, 103, 85, 54, 66, 82, 104,
		107, 57, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 72, 74, 49, 99, 51, 82, 108, 90, 72,
		78, 108, 99, 110, 90, 112, 89, 50, 86, 122, 76, 109, 108, 117, 100, 71, 86, 115, 76, 109,
		78, 118, 98, 83, 57, 106, 98, 50, 53, 48, 90, 87, 53, 48, 76, 48, 78, 83, 84, 67, 57, 84,
		82, 49, 103, 118, 81, 88, 82, 48, 90, 88, 78, 48, 89, 88, 82, 112, 98, 50, 53, 83, 90, 88,
		66, 118, 99, 110, 82, 84, 97, 87, 100, 117, 97, 87, 53, 110, 81, 48, 69, 117, 89, 51, 74,
		115, 77, 66, 48, 71, 65, 49, 85, 100, 68, 103, 81, 87, 66, 66, 82, 52, 81, 51, 116, 50,
		112, 110, 54, 56, 48, 75, 57, 43, 81, 106, 102, 114, 78, 88, 119, 55, 104, 119, 70, 82, 80,
		68, 65, 102, 66, 103, 78, 86, 72, 83, 77, 69, 71, 68, 65, 87, 103, 66, 82, 52, 81, 51, 116,
		50, 112, 110, 54, 56, 48, 75, 57, 43, 81, 106, 102, 114, 78, 88, 119, 55, 104, 119, 70, 82,
		80, 68, 65, 79, 66, 103, 78, 86, 72, 81, 56, 66, 65, 102, 56, 69, 66, 65, 77, 67, 65, 81,
		89, 119, 69, 103, 89, 68, 86, 82, 48, 84, 65, 81, 72, 47, 66, 65, 103, 119, 66, 103, 69,
		66, 47, 119, 73, 66, 65, 68, 65, 78, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66,
		65, 81, 115, 70, 65, 65, 79, 67, 65, 89, 69, 65, 101, 70, 56, 116, 89, 77, 88, 73, 67, 118,
		81, 113, 101, 88, 89, 81, 73, 84, 107, 86, 50, 111, 76, 74, 115, 112, 54, 74, 52, 74, 65,
		113, 74, 97, 98, 72, 87, 120, 89, 74, 72, 71, 105, 114, 73, 69, 113, 117, 99, 82, 105, 74,
		83, 83, 120, 43, 72, 106, 73, 74, 69, 85, 86, 97, 106, 56, 69, 48, 81, 106, 69, 117, 100,
		54, 89, 53, 108, 78, 109, 88, 108, 99, 106, 113, 82, 88, 97, 67, 80, 79, 113, 75, 48, 101,
		71, 82, 122, 54, 104, 105, 43, 114, 105, 112, 77, 116, 80, 90, 115, 70, 78, 97, 66, 119,
		76, 81, 86, 86, 57, 48, 53, 83, 68, 106, 65, 122, 68, 122, 78, 73, 68, 110, 114, 99, 110,
		88, 121, 66, 52, 103, 99, 68, 70, 67, 118, 119, 68, 70, 75, 75, 103, 76, 82, 106, 79, 66,
		47, 87, 65, 113, 103, 115, 99, 68, 85, 111, 71, 113, 53, 90, 86, 105, 122, 76, 85, 122, 84,
		113, 105, 81, 80, 109, 85, 76, 65, 81, 97, 66, 57, 99, 54, 79, 116, 105, 54, 115, 110, 69,
		70, 74, 105, 67, 81, 54, 55, 74, 76, 121, 87, 47, 69, 56, 51, 47, 102, 114, 122, 67, 109,
		79, 53, 82, 117, 54, 87, 106, 85, 52, 116, 109, 115, 109, 121, 56, 82, 97, 85, 100, 52, 65,
		80, 75, 48, 119, 90, 84, 71, 116, 102, 80, 88, 85, 55, 119, 43, 73, 66, 100, 71, 53, 69,
		122, 48, 107, 69, 49, 113, 122, 120, 71, 81, 97, 76, 52, 103, 73, 78, 74, 49, 122, 77, 121,
		108, 101, 68, 110, 98, 117, 83, 56, 85, 105, 99, 106, 74, 105, 106, 118, 113, 65, 49, 53,
		50, 83, 113, 48, 52, 57, 69, 83, 68, 122, 43, 49, 114, 82, 71, 99, 50, 78, 86, 69, 113,
		104, 49, 75, 97, 71, 88, 109, 116, 88, 118, 113, 120, 88, 99, 84, 66, 43, 76, 106, 121, 53,
		66, 119, 50, 107, 101, 48, 118, 56, 105, 71, 110, 103, 70, 66, 80, 113, 67, 84, 86, 66, 51,
		111, 112, 53, 75, 66, 71, 51, 82, 106, 98, 70, 54, 82, 82, 83, 122, 119, 122, 117, 87, 102,
		76, 55, 81, 69, 114, 78, 67, 56, 87, 69, 121, 53, 121, 68, 86, 65, 82, 122, 84, 65, 53, 43,
		120, 109, 66, 99, 51, 56, 56, 118, 57, 68, 109, 50, 49, 72, 71, 102, 99, 67, 56, 79, 68,
		68, 43, 103, 84, 57, 115, 83, 112, 115, 115, 113, 48, 97, 115, 99, 109, 118, 72, 52, 57,
		77, 79, 103, 106, 116, 49, 121, 111, 121, 115, 76, 116, 100, 67, 116, 74, 87, 47, 57, 70,
		90, 112, 111, 79, 121, 112, 97, 72, 120, 48, 82, 43, 109, 74, 84, 76, 119, 80, 88, 86, 77,
		114, 118, 68, 97, 86, 122, 87, 104, 53, 97, 105, 69, 120, 43, 105, 100, 107, 83, 71, 77,
		110, 88, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 3, 72, 0, 48, 69, 2, 33, 0, 246, 131,
		200, 147, 204, 177, 206, 93, 111, 224, 8, 23, 231, 140, 251, 4, 17, 104, 208, 144, 173,
		197, 21, 141, 87, 192, 72, 233, 219, 58, 227, 187, 2, 32, 65, 204, 162, 79, 55, 105, 142,
		102, 26, 101, 129, 67, 140, 129, 186, 108, 191, 94, 254, 72, 217, 254, 218, 53, 33, 59, 24,
		237, 229, 15, 121, 120,
	];
	//let r_result = verify_ias_report(&report);
	let rec_result = verify_ias_report(&rec_report);

	//assert!(r_result.is_err());
	match rec_result {
		Ok(_) => (),
		Err(e) => {
			println!("{}", e.to_string());
			panic!("{}", e.to_string());
		},
	}
}

#[test]
fn test_register_main_account() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		assert_eq!(Accounts::<Test>::contains_key::<AccountId32>(account_id.clone().into()), false);
		assert_ok!(OCEX::register_main_account(
			Origin::signed(account_id.clone().into()),
			account_id.clone().into()
		));
		assert_eq!(Accounts::<Test>::contains_key::<AccountId32>(account_id.clone().into()), true);
		let account_info = Accounts::<Test>::get(account_id.clone()).unwrap();
		assert_eq!(account_info.proxies.len(), 1);
		assert_eq!(account_info.proxies[0], account_id.clone());
		assert_last_event::<Test>(
			crate::Event::MainAccountRegistered {
				main: account_id.clone(),
				proxy: account_id.clone(),
			}
			.into(),
		);
		let event: IngressMessages<AccountId32> =
			IngressMessages::RegisterUser(account_id.clone(), account_id.clone());
		assert_eq!(OCEX::ingress_messages()[0], event);
	});
}

#[test]
fn test_register_main_account_main_account_already_exists() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_main_account(
			Origin::signed(account_id.clone().into()),
			account_id.clone().into()
		));
		assert_eq!(Accounts::<Test>::contains_key::<AccountId32>(account_id.clone().into()), true);
		assert_noop!(
			OCEX::register_main_account(
				Origin::signed(account_id.clone().into()),
				account_id.clone().into()
			),
			Error::<Test>::MainAccountAlreadyRegistered
		);
	});
}

#[test]
fn test_register_main_account_bad_origin() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::register_main_account(Origin::root(), account_id.clone().into()),
			BadOrigin
		);
		assert_noop!(
			OCEX::register_main_account(Origin::none(), account_id.clone().into()),
			BadOrigin
		);
	});
}

#[test]
fn test_add_proxy_account_main_account_not_found() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::add_proxy_account(Origin::signed(account_id.clone().into()), account_id.into()),
			Error::<Test>::MainAccountNotFound
		);
	});
}

#[test]
fn test_add_proxy_account_proxy_limit_exceeded() {
	let account_id = create_account_id();
	let proxy_account = create_proxy_account();
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_main_account(
			Origin::signed(account_id.clone().into()),
			account_id.clone().into()
		));
		assert_ok!(OCEX::add_proxy_account(
			Origin::signed(account_id.clone().into()),
			account_id.clone().into()
		));
		assert_ok!(OCEX::add_proxy_account(
			Origin::signed(account_id.clone().into()),
			account_id.clone().into()
		));
		assert_noop!(
			OCEX::add_proxy_account(
				Origin::signed(account_id.clone().into()),
				proxy_account.clone().into()
			),
			Error::<Test>::ProxyLimitExceeded
		);
	})
}

#[test]
fn test_add_proxy_account_bad_origin() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(OCEX::add_proxy_account(Origin::root(), account_id.clone().into()), BadOrigin);

		assert_noop!(OCEX::add_proxy_account(Origin::none(), account_id.clone().into()), BadOrigin);
	});
}

#[test]
fn test_add_proxy_account() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_main_account(
			Origin::signed(account_id.clone().into()),
			account_id.clone().into()
		));
		assert_ok!(OCEX::add_proxy_account(
			Origin::signed(account_id.clone().into()),
			account_id.clone().into()
		));
		assert_last_event::<Test>(
			crate::Event::MainAccountRegistered {
				main: account_id.clone(),
				proxy: account_id.clone(),
			}
			.into(),
		);
		let event: IngressMessages<AccountId32> =
			IngressMessages::AddProxy(account_id.clone(), account_id.clone());
		assert_eq!(OCEX::ingress_messages()[1], event);
	});
}

#[test]
fn test_register_trading_pair_both_assets_cannot_be_same() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::polkadex,
				AssetId::polkadex,
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into(),
			),
			Error::<Test>::BothAssetsCannotBeSame
		);
	});
}

#[test]
fn test_register_trading_pair_bad_origin() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::register_trading_pair(
				Origin::none(),
				AssetId::polkadex,
				AssetId::polkadex,
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into(),
			),
			BadOrigin
		);

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::signed(account_id.into()),
				AssetId::polkadex,
				AssetId::polkadex,
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into(),
			),
			BadOrigin
		);
	});
}

#[test]
fn test_register_trading_pair_value_zero() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				0_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into(),
			),
			Error::<Test>::TradingPairConfigCannotBeZero
		);
	});
}

#[test]
fn test_register_trading_pair() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			1_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));

		assert_eq!(
			TradingPairs::<Test>::contains_key(AssetId::asset(10), AssetId::asset(20)),
			true
		);
		assert_eq!(
			TradingPairs::<Test>::get(AssetId::asset(10), AssetId::asset(20))
				.unwrap()
				.operational_status,
			true
		);
		assert_last_event::<Test>(
			crate::Event::TradingPairRegistered {
				base: AssetId::asset(10),
				quote: AssetId::asset(20),
			}
			.into(),
		);
		let trading_pair =
			TradingPairs::<Test>::get(AssetId::asset(10), AssetId::asset(20)).unwrap();
		let event: IngressMessages<AccountId32> = IngressMessages::OpenTradingPair(trading_pair);
		assert_eq!(OCEX::ingress_messages()[0], event);
	});
}

#[test]
fn test_register_trading_pair_amount_overflow() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				DEPOSIT_MAX + 1,
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				DEPOSIT_MAX + 1,
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				DEPOSIT_MAX + 1,
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				1_u128.into(),
				DEPOSIT_MAX + 1,
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				DEPOSIT_MAX + 1,
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				DEPOSIT_MAX + 1
			),
			Error::<Test>::AmountOverflow
		);
	});
}

#[test]
fn test_update_trading_pair_amount_overflow() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			100_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));

		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				DEPOSIT_MAX + 1,
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				DEPOSIT_MAX + 1,
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				DEPOSIT_MAX + 1,
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				1_u128.into(),
				DEPOSIT_MAX + 1,
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				DEPOSIT_MAX + 1,
				10_u128.into()
			),
			Error::<Test>::AmountOverflow
		);

		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				100_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				DEPOSIT_MAX + 1
			),
			Error::<Test>::AmountOverflow
		);
	});
}

#[test]
fn test_register_trading_pair_trading_pair_already_registered() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			1_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::TradingPairAlreadyRegistered
		);

		assert_noop!(
			OCEX::register_trading_pair(
				Origin::root(),
				AssetId::asset(20),
				AssetId::asset(10),
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::TradingPairAlreadyRegistered
		);
	});
}

#[test]
fn test_update_trading_pair() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			1_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));

		assert_ok!(OCEX::update_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			1_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));

		assert_last_event::<Test>(
			crate::Event::TradingPairUpdated {
				base: AssetId::asset(10),
				quote: AssetId::asset(20),
			}
			.into(),
		);
		let trading_pair =
			TradingPairs::<Test>::get(AssetId::asset(10), AssetId::asset(20)).unwrap();
		let event: IngressMessages<AccountId32> = IngressMessages::UpdateTradingPair(trading_pair);
		assert_eq!(OCEX::ingress_messages()[1], event);
	});
}

#[test]
fn test_update_trading_pair_trading_pair_not_registered() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			Error::<Test>::TradingPairNotRegistered
		);
	});
}

#[test]
fn test_update_trading_pair_bad_origin() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::update_trading_pair(
				Origin::none(),
				AssetId::asset(10),
				AssetId::asset(20),
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			BadOrigin
		);
		assert_noop!(
			OCEX::update_trading_pair(
				Origin::signed(account_id.into()),
				AssetId::asset(10),
				AssetId::asset(20),
				1_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into()
			),
			BadOrigin
		);
	});
}

#[test]
fn test_update_trading_pair_value_zero() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			1_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));

		assert_noop!(
			OCEX::update_trading_pair(
				Origin::root(),
				AssetId::asset(10),
				AssetId::asset(20),
				0_u128.into(),
				100_u128.into(),
				1_u128.into(),
				100_u128.into(),
				100_u128.into(),
				10_u128.into(),
			),
			Error::<Test>::TradingPairConfigCannotBeZero
		);
	});
}

#[test]
fn test_deposit_unknown_asset() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::deposit(
				Origin::signed(account_id.clone().into()),
				AssetId::asset(10),
				100_u128.into()
			),
			TokenError::UnknownAsset
		);
	});
}

#[test]
fn test_deposit_bad_origin() {
	new_test_ext().execute_with(|| {
		assert_noop!(OCEX::deposit(Origin::root(), AssetId::asset(10), 100_u128.into()), BadOrigin);

		assert_noop!(OCEX::deposit(Origin::none(), AssetId::asset(10), 100_u128.into()), BadOrigin);
	});
}

#[test]
fn test_deposit() {
	let account_id = create_account_id();
	let custodian_account = OCEX::get_custodian_account();
	new_test_ext().execute_with(|| {
		mint_into_account(account_id.clone());
		// Balances before deposit
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			10000000000000000000000
		);
		assert_eq!(<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()), 0);
		assert_ok!(OCEX::deposit(
			Origin::signed(account_id.clone().into()),
			AssetId::polkadex,
			100_u128.into()
		));
		// Balances after deposit
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			9999999999999999999900
		);
		assert_eq!(<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()), 100);
		assert_last_event::<Test>(
			crate::Event::DepositSuccessful {
				user: account_id.clone(),
				asset: AssetId::polkadex,
				amount: 100_u128,
			}
			.into(),
		);
		let event: IngressMessages<AccountId32> =
			IngressMessages::Deposit(account_id, AssetId::polkadex, Decimal::new(10, 11));
		assert_eq!(OCEX::ingress_messages()[0], event);
	});
}

#[test]
fn test_deposit_large_value() {
	let account_id = create_account_id();
	let custodian_account = OCEX::get_custodian_account();
	new_test_ext().execute_with(|| {
		mint_into_account_large(account_id.clone());
		// Balances before deposit
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			1_000_000_000_000_000_000_000_000_000_000
		);
		assert_eq!(<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()), 0);
		assert_noop!(
			OCEX::deposit(
				Origin::signed(account_id.clone().into()),
				AssetId::polkadex,
				1_000_000_000_000_000_000_000_000_0000
			),
			Error::<Test>::AmountOverflow
		);
	});
}

#[test]
fn test_deposit_assets_overflow() {
	let account_id = create_account_id();
	let custodian_account = OCEX::get_custodian_account();
	new_test_ext().execute_with(|| {
		mint_into_account_large(account_id.clone());
		// Balances before deposit
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			1_000_000_000_000_000_000_000_000_000_000
		);
		assert_eq!(<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()), 0);
		assert_ok!(OCEX::deposit(
			Origin::signed(account_id.clone().into()),
			AssetId::polkadex,
			1_000_000_000_000_000_000_000_000_000
		));
		let large_value: Decimal = Decimal::MAX;
		mint_into_account_large(account_id.clone());
		// Directly setting the storage value, found it very difficult to manually fill it up
		TotalAssets::<Test>::insert(
			AssetId::polkadex,
			large_value.saturating_sub(Decimal::from_u128(1).unwrap()),
		);

		assert_noop!(
			OCEX::deposit(
				Origin::signed(account_id.clone().into()),
				AssetId::polkadex,
				10_u128.pow(20)
			),
			Error::<Test>::AmountOverflow
		);
	});
}

#[test]
fn test_open_trading_pair_both_assets_cannot_be_same() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::open_trading_pair(Origin::root(), AssetId::asset(10), AssetId::asset(10)),
			Error::<Test>::BothAssetsCannotBeSame
		);

		assert_eq!(OCEX::ingress_messages().len(), 0);
	});
}

#[test]
fn test_open_trading_pair_trading_pair_not_found() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::open_trading_pair(Origin::root(), AssetId::asset(10), AssetId::asset(20)),
			Error::<Test>::TradingPairNotFound
		);

		assert_eq!(OCEX::ingress_messages().len(), 0);
	});
}

#[test]
fn test_open_trading_pair_bad_origin() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::open_trading_pair(Origin::none(), AssetId::asset(10), AssetId::asset(20)),
			BadOrigin
		);

		assert_noop!(
			OCEX::open_trading_pair(
				Origin::signed(account_id.into()),
				AssetId::asset(10),
				AssetId::asset(20)
			),
			BadOrigin
		);
	});
}

#[test]
fn test_open_trading_pair() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			1_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));
		assert_ok!(OCEX::open_trading_pair(Origin::root(), AssetId::asset(10), AssetId::asset(20)));
		assert_eq!(
			TradingPairs::<Test>::get(AssetId::asset(10), AssetId::asset(20))
				.unwrap()
				.operational_status,
			true
		);
		let trading_pair = OCEX::trading_pairs(AssetId::asset(10), AssetId::asset(20)).unwrap();
		assert_last_event::<Test>(
			crate::Event::OpenTradingPair { pair: trading_pair.clone() }.into(),
		);
		let event: IngressMessages<AccountId32> = IngressMessages::OpenTradingPair(trading_pair);
		assert_eq!(OCEX::ingress_messages()[0], event);
	})
}

#[test]
fn test_close_trading_pair_both_assets_cannot_be_same() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::close_trading_pair(Origin::root(), AssetId::asset(10), AssetId::asset(10)),
			Error::<Test>::BothAssetsCannotBeSame
		);

		assert_eq!(OCEX::ingress_messages().len(), 0);
	});
}

#[test]
fn test_close_trading_trading_pair_not_found() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::close_trading_pair(Origin::root(), AssetId::asset(10), AssetId::asset(20)),
			Error::<Test>::TradingPairNotFound
		);

		assert_eq!(OCEX::ingress_messages().len(), 0);
	});
}

#[test]
fn test_close_trading_trading_bad_origin() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::close_trading_pair(Origin::none(), AssetId::asset(10), AssetId::asset(20)),
			BadOrigin
		);

		assert_noop!(
			OCEX::close_trading_pair(
				Origin::signed(account_id.into()),
				AssetId::asset(10),
				AssetId::asset(20)
			),
			BadOrigin
		);
	});
}

#[test]
fn test_close_trading_pair() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::register_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20),
			1_u128.into(),
			100_u128.into(),
			1_u128.into(),
			100_u128.into(),
			100_u128.into(),
			10_u128.into()
		));
		assert_ok!(OCEX::close_trading_pair(
			Origin::root(),
			AssetId::asset(10),
			AssetId::asset(20)
		));
		assert_eq!(
			TradingPairs::<Test>::get(AssetId::asset(10), AssetId::asset(20))
				.unwrap()
				.operational_status,
			false
		);
		let trading_pair = OCEX::trading_pairs(AssetId::asset(10), AssetId::asset(20)).unwrap();
		assert_last_event::<Test>(
			crate::Event::ShutdownTradingPair { pair: trading_pair.clone() }.into(),
		);
		let event: IngressMessages<AccountId32> = IngressMessages::CloseTradingPair(trading_pair);
		assert_eq!(OCEX::ingress_messages()[1], event);
	})
}

#[test]
fn collect_fees_unexpected_behaviour() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		// TODO! Discuss if this is expected behaviour, if not then could this be a potential DDOS?
		assert_ok!(OCEX::collect_fees(Origin::root(), 100, account_id.clone().into()));

		assert_last_event::<Test>(
			crate::Event::FeesClaims { beneficiary: account_id, snapshot_id: 100 }.into(),
		);
	});
}

#[test]
fn collect_fees() {
	let account_id = create_account_id();
	let custodian_account = OCEX::get_custodian_account();
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let public_key_store = KeyStore::new();
	let public_key = SyncCryptoStore::sr25519_generate_new(
		&public_key_store,
		KEY_TYPE,
		Some(&format!("{}/hunter1", PHRASE)),
	)
	.expect("Unable to create sr25519 key pair");
	let mut t = new_test_ext();
	t.register_extension(KeystoreExt(Arc::new(public_key_store)));
	t.execute_with(|| {
		mint_into_account(account_id.clone());
		mint_into_account(custodian_account.clone());
		// Initial Balances
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			10000000000000000000000
		);
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()),
			10000000000000000000000
		);
		let fees = create_fees::<Test>();

		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 1,
				snapshot_hash: H256::random(),
				withdrawals: Default::default(),
				fees: bounded_vec![fees],
			};
		assert_ok!(OCEX::insert_enclave(Origin::root(), account_id.clone().into()));
		let bytes = snapshot.encode();
		let signature = public_key.sign(KEY_TYPE, &bytes).unwrap();

		assert_ok!(OCEX::submit_snapshot(
			Origin::signed(account_id.clone().into()),
			snapshot,
			signature.clone().into()
		),);

		assert_ok!(OCEX::collect_fees(Origin::root(), 1, account_id.clone().into()));
		// Balances after collect fees
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			10000000010000000000000
		);
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()),
			9999999990000000000000
		);
	});
}

#[test]
fn test_collect_fees_bad_origin() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::collect_fees(Origin::signed(account_id.clone()), 100, account_id.clone().into()),
			BadOrigin
		);

		assert_noop!(
			OCEX::collect_fees(Origin::signed(account_id.clone()), 100, account_id.into()),
			BadOrigin
		);
	});
}

// P.S. This was to apply a DDOS attack and see the response in the mock environment
/* #[test]
fn collect_fees_ddos(){
	let account_id = create_account_id();
	new_test_ext().execute_with(||{
		// TODO! Discuss if this is expected behaviour, if not then could this be a potential DDOS?
		for x in 0..10000000 {
			assert_ok!(
				OCEX::collect_fees(
					Origin::signed(account_id.clone().into()),
					x,
					account_id.clone().into()
				)
			);
		}
	});
} */

#[test]
fn test_submit_snapshot_sender_is_not_attested_enclave() {
	let account_id = create_account_id();
	let payl: [u8; 64] = [0; 64];
	let sig = sp_application_crypto::sr25519::Signature::from_raw(payl);
	new_test_ext().execute_with(|| {
		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 1,
				snapshot_hash: H256::random(),
				withdrawals: Default::default(),
				fees: bounded_vec![],
			};
		assert_noop!(
			OCEX::submit_snapshot(Origin::signed(account_id.into()), snapshot, sig.clone().into()),
			Error::<Test>::SenderIsNotAttestedEnclave
		);
		assert_eq!(OCEX::ingress_messages().len(), 0);
	});
}

#[test]
fn test_submit_snapshot_snapshot_nonce_error() {
	let account_id = create_account_id();
	let payl: [u8; 64] = [0; 64];
	let sig = sp_application_crypto::sr25519::Signature::from_raw(payl);
	new_test_ext().execute_with(|| {
		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 2,
				snapshot_hash: H256::random(),
				withdrawals: Default::default(),
				fees: bounded_vec![],
			};
		assert_ok!(OCEX::insert_enclave(Origin::root(), account_id.clone().into()));
		assert_noop!(
			OCEX::submit_snapshot(Origin::signed(account_id.into()), snapshot, sig.clone().into()),
			Error::<Test>::SnapshotNonceError
		);

		assert_eq!(OCEX::ingress_messages().len(), 0);
	});
}

#[test]
fn test_submit_snapshot_enclave_signature_verification_failed() {
	let account_id = create_account_id();
	let payl: [u8; 64] = [0; 64];
	let sig = sp_application_crypto::sr25519::Signature::from_raw(payl);
	new_test_ext().execute_with(|| {
		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 1,
				snapshot_hash: H256::random(),
				withdrawals: Default::default(),
				fees: bounded_vec![],
			};
		assert_ok!(OCEX::insert_enclave(Origin::root(), account_id.clone().into()));
		assert_noop!(
			OCEX::submit_snapshot(Origin::signed(account_id.into()), snapshot, sig.clone().into()),
			Error::<Test>::EnclaveSignatureVerificationFailed
		);

		assert_eq!(OCEX::ingress_messages().len(), 0);
	});
}

#[test]
fn test_submit_snapshot_bad_origin() {
	let payl: [u8; 64] = [0; 64];
	let sig = sp_application_crypto::sr25519::Signature::from_raw(payl);
	new_test_ext().execute_with(|| {
		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 0,
				snapshot_hash: H256::random(),
				withdrawals: Default::default(),
				fees: bounded_vec![],
			};
		assert_noop!(
			OCEX::submit_snapshot(Origin::root(), snapshot.clone(), sig.clone().into()),
			BadOrigin
		);

		assert_noop!(
			OCEX::submit_snapshot(Origin::root(), snapshot, sig.clone().into()),
			BadOrigin
		);
	});
}

#[test]
fn test_submit_snapshot() {
	let account_id = create_account_id();
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let public_key_store = KeyStore::new();
	let public_key = SyncCryptoStore::sr25519_generate_new(
		&public_key_store,
		KEY_TYPE,
		Some(&format!("{}/hunter1", PHRASE)),
	)
	.expect("Unable to create sr25519 key pair");
	let mut t = new_test_ext();
	t.register_extension(KeystoreExt(Arc::new(public_key_store)));
	t.execute_with(|| {
		let withdrawal = create_withdrawal::<Test>();
		let mut withdrawal_map: BoundedBTreeMap<
			AccountId,
			BoundedVec<Withdrawal<AccountId>, WithdrawalLimit>,
			SnapshotAccLimit,
		> = BoundedBTreeMap::new();
		withdrawal_map.try_insert(account_id.clone(), bounded_vec![withdrawal]).unwrap();
		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 1,
				snapshot_hash: H256::random(),
				withdrawals: withdrawal_map.clone(),
				fees: bounded_vec![],
			};
		assert_ok!(OCEX::insert_enclave(Origin::root(), account_id.clone().into()));
		let bytes = snapshot.encode();
		let signature = public_key.sign(KEY_TYPE, &bytes).unwrap();

		assert_ok!(OCEX::submit_snapshot(
			Origin::signed(account_id.into()),
			snapshot.clone(),
			signature.clone().into()
		),);
		assert_eq!(Withdrawals::<Test>::contains_key(1), true);
		assert_eq!(Withdrawals::<Test>::get(1), withdrawal_map.clone());
		assert_eq!(FeesCollected::<Test>::contains_key(1), true);
		assert_eq!(Snapshots::<Test>::contains_key(1), true);
		assert_eq!(Snapshots::<Test>::get(1).unwrap(), snapshot.clone());
		assert_eq!(SnapshotNonce::<Test>::get().unwrap(), 1);
		let onchain_events: BoundedVec<
			polkadex_primitives::ocex::OnChainEvents<AccountId>,
			polkadex_primitives::OnChainEventsLimit,
		> = bounded_vec![polkadex_primitives::ocex::OnChainEvents::GetStorage(
			polkadex_primitives::ocex::Pallet::OCEX,
			polkadex_primitives::ocex::StorageItem::Withdrawal,
			1
		)];
		assert_eq!(OnChainEvents::<Test>::get(), onchain_events);
		// Checking for redundant data inside snapshot
		let withdrawal_map_empty: BoundedBTreeMap<
			AccountId,
			BoundedVec<Withdrawal<AccountId>, WithdrawalLimit>,
			SnapshotAccLimit,
		> = BoundedBTreeMap::new();
		let empty_fees: BoundedVec<Fees, AssetsLimit> = bounded_vec![];

		assert_eq!(Snapshots::<Test>::get(1).unwrap().fees, empty_fees);
		assert_eq!(Snapshots::<Test>::get(1).unwrap().withdrawals, withdrawal_map_empty);
	})
}

#[test]
fn test_register_enclave_not_whitelist() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		Timestamp::set_timestamp(TEST4_SETUP.timestamp.checked_into().unwrap());
		assert_noop!(
			OCEX::register_enclave(Origin::signed(account_id.clone()), TEST4_SETUP.cert.to_vec()),
			Error::<Test>::EnclaveNotWhitelisted
		);
	});
}

#[test]
fn test_register_enclave() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		Timestamp::set_timestamp(TEST4_SETUP.timestamp.checked_into().unwrap());
		let enclave_account_id = create_signer::<Test>();
		assert_ok!(OCEX::whitelist_enclave(Origin::root(), enclave_account_id));

		assert_ok!(OCEX::register_enclave(
			Origin::signed(account_id.clone()),
			TEST4_SETUP.cert.to_vec()
		));
	});
}

#[test]
fn test_whitelist_enclave() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::whitelist_enclave(Origin::root(), account_id));
	});
}

#[test]
fn test_whitelist_enclave_bad_origin() {
	let account_id = create_account_id();

	new_test_ext().execute_with(|| {
		assert_noop!(OCEX::whitelist_enclave(Origin::none(), account_id.clone()), BadOrigin);

		assert_noop!(
			OCEX::whitelist_enclave(Origin::signed(account_id.clone()), account_id),
			BadOrigin
		);
	});
}

#[test]
fn test_register_enclave_empty_report() {
	let account_id = create_account_id();
	let ias_report = vec![];
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::register_enclave(Origin::signed(account_id), ias_report),
			Error::<Test>::RemoteAttestationVerificationFailed
		);
	});
}

#[test]
fn test_reigster_enclave_bad_origin() {
	new_test_ext().execute_with(|| {
		assert_noop!(OCEX::register_enclave(Origin::root(), vec![]), BadOrigin);

		assert_noop!(OCEX::register_enclave(Origin::none(), vec![]), BadOrigin);
	});
}

#[test]
fn test_withdrawal_invalid_withdrawal_index() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(
			OCEX::claim_withdraw(Origin::signed(account_id.clone().into()), 1, account_id.clone()),
			Error::<Test>::InvalidWithdrawalIndex
		);
	});
}

#[test]
fn test_withdrawal() {
	let account_id = create_account_id();
	let custodian_account = OCEX::get_custodian_account();
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let public_key_store = KeyStore::new();
	let public_key = SyncCryptoStore::sr25519_generate_new(
		&public_key_store,
		KEY_TYPE,
		Some(&format!("{}/hunter1", PHRASE)),
	)
	.expect("Unable to create sr25519 key pair");
	let mut t = new_test_ext();
	t.register_extension(KeystoreExt(Arc::new(public_key_store)));
	t.execute_with(|| {
		mint_into_account(account_id.clone());
		mint_into_account(custodian_account.clone());
		// Initial Balances
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			10000000000000000000000
		);
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()),
			10000000000000000000000
		);
		let withdrawal = create_withdrawal::<Test>();
		let mut withdrawal_map: BoundedBTreeMap<
			AccountId,
			BoundedVec<Withdrawal<AccountId>, WithdrawalLimit>,
			SnapshotAccLimit,
		> = BoundedBTreeMap::new();
		withdrawal_map
			.try_insert(account_id.clone(), bounded_vec![withdrawal.clone()])
			.unwrap();

		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 1,
				snapshot_hash: H256::random(),
				withdrawals: withdrawal_map,
				fees: bounded_vec![],
			};
		assert_ok!(OCEX::insert_enclave(Origin::root(), account_id.clone().into()));
		let bytes = snapshot.encode();
		let signature = public_key.sign(KEY_TYPE, &bytes).unwrap();

		assert_ok!(OCEX::submit_snapshot(
			Origin::signed(account_id.clone().into()),
			snapshot,
			signature.clone().into()
		),);

		assert_ok!(OCEX::claim_withdraw(
			Origin::signed(account_id.clone().into()),
			1,
			account_id.clone()
		));
		// Balances after withdrawal
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(account_id.clone()),
			10000000100000000000000
		);
		assert_eq!(
			<Test as Config>::NativeCurrency::free_balance(custodian_account.clone()),
			9999999900000000000000,
		);
		let withdrawal_claimed: polkadex_primitives::ocex::OnChainEvents<AccountId> =
			polkadex_primitives::ocex::OnChainEvents::OrderBookWithdrawalClaimed(
				1,
				account_id.clone().into(),
				bounded_vec![withdrawal],
			);
		assert_eq!(OnChainEvents::<Test>::get()[1], withdrawal_claimed);
	});
}
#[test]
fn test_onchain_events_overflow() {
	let account_id = create_account_id();
	let custodian_account = OCEX::get_custodian_account();
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let public_key_store = KeyStore::new();
	let public_key = SyncCryptoStore::sr25519_generate_new(
		&public_key_store,
		KEY_TYPE,
		Some(&format!("{}/hunter1", PHRASE)),
	)
	.expect("Unable to create sr25519 key pair");
	// create 500 accounts
	let mut account_id_vector: Vec<AccountId> = vec![];
	for x in 0..500 {
		let account_id_500 = create_account_id_500(x as u32);
		account_id_vector.push(account_id_500);
	}
	let mut t = new_test_ext();
	t.register_extension(KeystoreExt(Arc::new(public_key_store)));
	t.execute_with(|| {
		mint_into_account(account_id.clone());
		mint_into_account(custodian_account.clone());
		let withdrawal = create_withdrawal::<Test>();
		let mut withdrawal_map: BoundedBTreeMap<
			AccountId,
			BoundedVec<Withdrawal<AccountId>, WithdrawalLimit>,
			SnapshotAccLimit,
		> = BoundedBTreeMap::new();
		withdrawal_map
			.try_insert(account_id.clone(), bounded_vec![withdrawal.clone()])
			.unwrap();
		for x in account_id_vector.clone() {
			withdrawal_map.try_insert(x, bounded_vec![withdrawal.clone()]).unwrap();
		}

		let snapshot =
			EnclaveSnapshot::<AccountId32, WithdrawalLimit, AssetsLimit, SnapshotAccLimit> {
				snapshot_number: 1,
				snapshot_hash: H256::random(),
				withdrawals: withdrawal_map,
				fees: bounded_vec![],
			};
		assert_ok!(OCEX::insert_enclave(Origin::root(), account_id.clone().into()));
		let bytes = snapshot.encode();
		let signature = public_key.sign(KEY_TYPE, &bytes).unwrap();

		assert_ok!(OCEX::submit_snapshot(
			Origin::signed(account_id.clone().into()),
			snapshot,
			signature.clone().into()
		),);

		// Perform withdraw for 500 accounts
		for x in 0..account_id_vector.len() - 1 {
			assert_ok!(OCEX::claim_withdraw(
				Origin::signed(account_id_vector[x].clone().into()),
				1,
				account_id_vector[x].clone()
			));
		}
		let last_account = account_id_vector.len() - 1;
		assert_noop!(
			OCEX::claim_withdraw(
				Origin::signed(account_id_vector[last_account].clone().into()),
				1,
				account_id_vector[last_account].clone()
			),
			Error::<Test>::OnchainEventsBoundedVecOverflow
		);

		// Cleanup Onchain events
		<OCEX as OnInitialize<u64>>::on_initialize(0);
		assert_eq!(OnChainEvents::<Test>::get().len(), 0);

		// Perform withdraw now
		assert_ok!(OCEX::claim_withdraw(
			Origin::signed(account_id_vector[last_account].clone().into()),
			1,
			account_id_vector[last_account].clone()
		));
	});
}

#[test]
fn test_withdrawal_bad_origin() {
	new_test_ext().execute_with(|| {
		let account_id = create_account_id();
		assert_noop!(OCEX::claim_withdraw(Origin::root(), 1, account_id.clone()), BadOrigin);

		assert_noop!(OCEX::claim_withdraw(Origin::none(), 1, account_id.clone()), BadOrigin);
	});
}

#[test]
fn test_shutdown() {
	new_test_ext().execute_with(|| {
		assert_ok!(OCEX::shutdown(Origin::root()));

		let ingress_message: IngressMessages<AccountId32> = IngressMessages::Shutdown;
		assert_eq!(OCEX::ingress_messages()[0], ingress_message);
		assert_eq!(ExchangeState::<Test>::get(), false);
	});
}

#[test]
fn test_shutdown_bad_origin() {
	let account_id = create_account_id();
	new_test_ext().execute_with(|| {
		assert_noop!(OCEX::shutdown(Origin::signed(account_id.into())), BadOrigin);

		assert_noop!(OCEX::shutdown(Origin::none()), BadOrigin);
	});
}

#[test]
fn test_unregister_timed_out_enclaves() {
	let enclave_id = create_account_id();
	new_test_ext().execute_with(|| {
		let past_ts = 1000;
		let ts: Moment = past_ts.try_into().unwrap();
		RegisteredEnclaves::<Test>::insert(enclave_id.clone(), ts);
		Timestamp::set_timestamp(past_ts + 86400000);
		<OCEX as OnInitialize<u64>>::on_initialize(100000000);
		assert_eq!(RegisteredEnclaves::<Test>::contains_key(enclave_id), false);
	});
}

fn mint_into_account(account_id: AccountId32) {
	let _result = Balances::deposit_creating(&account_id, 10000000000000000000000);
}

fn mint_into_account_large(account_id: AccountId32) {
	let _result =
		Balances::deposit_creating(&account_id, 1_000_000_000_000_000_000_000_000_000_000);
}

#[allow(dead_code)]
fn create_asset_and_credit(asset_id: u128, account_id: AccountId32) {
	assert_ok!(Assets::create(
		Origin::signed(account_id.clone().into()),
		asset_id.into(),
		account_id.clone().into(),
		100_u128
	));
}

fn create_account_id() -> AccountId32 {
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let keystore = KeyStore::new();
	let account_id: AccountId32 = SyncCryptoStore::sr25519_generate_new(
		&keystore,
		KEY_TYPE,
		Some(&format!("{}/hunter1", PHRASE)),
	)
	.expect("Unable to create sr25519 key pair")
	.try_into()
	.expect("Unable to convert to AccountId32");

	return account_id
}
fn create_account_id_500(uid: u32) -> AccountId32 {
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let keystore = KeyStore::new();
	let account_id: AccountId32 = SyncCryptoStore::sr25519_generate_new(
		&keystore,
		KEY_TYPE,
		Some(&format!("{}/hunter{}", PHRASE, uid)),
	)
	.expect("Unable to create sr25519 key pair")
	.try_into()
	.expect("Unable to convert to AccountId32");

	return account_id
}

fn create_proxy_account() -> AccountId32 {
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let keystore = KeyStore::new();
	let account_id: AccountId32 = SyncCryptoStore::sr25519_generate_new(
		&keystore,
		KEY_TYPE,
		Some(&format!("{}/hunter2", PHRASE)),
	)
	.expect("Unable to create sr25519 key pair")
	.try_into()
	.expect("Unable to convert to AccountId32");

	return account_id
}

#[allow(dead_code)]
fn create_public_key() -> sp_application_crypto::sr25519::Public {
	const PHRASE: &str =
		"news slush supreme milk chapter athlete soap sausage put clutch what kitten";
	let keystore = KeyStore::new();
	let account_id = SyncCryptoStore::sr25519_generate_new(
		&keystore,
		KEY_TYPE,
		Some(&format!("{}/hunter1", PHRASE)),
	)
	.expect("Unable to create sr25519 key pair");

	return account_id
}

pub fn create_withdrawal<T: Config>() -> Withdrawal<AccountId32> {
	let account_id = create_account_id();
	let withdrawal: Withdrawal<AccountId32> = Withdrawal {
		main_account: account_id,
		asset: AssetId::polkadex,
		amount: 100_u32.into(),
		event_id: 0,
		fees: 1_u32.into(),
	};
	return withdrawal
}

pub fn create_fees<T: Config>() -> Fees {
	let fees: Fees = Fees { asset: AssetId::polkadex, amount: Decimal::new(100, 1) };
	return fees
}

pub fn create_signer<T: Config>() -> T::AccountId {
	let signer: T::AccountId = T::AccountId::decode(&mut &TEST4_SETUP.signer_pub[..]).unwrap();
	return signer
}
