
//! Autogenerated weights for `pallet_ocex_lmp`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-15, STEPS: `100`, REPEAT: `200`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// pallet-ocex-lmp
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// ocex_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_ocex_lmp`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::OcexWeightInfo for WeightInfo<T> {
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Accounts (r:1 w:1)
	/// Proof Skipped: OCEX Accounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[0, 50000]`.
	fn register_main_account(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167`
		//  Estimated: `3632`
		// Minimum execution time: 13_039_000 picoseconds.
		Weight::from_parts(13_863_155, 0)
			.saturating_add(Weight::from_parts(0, 3632))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Accounts (r:1 w:1)
	/// Proof Skipped: OCEX Accounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 255]`.
	fn add_proxy_account(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397`
		//  Estimated: `3862`
		// Minimum execution time: 16_967_000 picoseconds.
		Weight::from_parts(17_884_917, 0)
			.saturating_add(Weight::from_parts(0, 3862))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX TradingPairs (r:1 w:1)
	/// Proof Skipped: OCEX TradingPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 50000]`.
	fn close_trading_pair(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `3856`
		// Minimum execution time: 16_480_000 picoseconds.
		Weight::from_parts(17_451_387, 0)
			.saturating_add(Weight::from_parts(0, 3856))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX TradingPairs (r:1 w:1)
	/// Proof Skipped: OCEX TradingPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 100000]`.
	fn open_trading_pair(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `3856`
		// Minimum execution time: 16_632_000 picoseconds.
		Weight::from_parts(17_594_655, 0)
			.saturating_add(Weight::from_parts(0, 3856))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX TradingPairs (r:2 w:1)
	/// Proof Skipped: OCEX TradingPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 100000]`.
	fn register_trading_pair(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167`
		//  Estimated: `6107`
		// Minimum execution time: 14_794_000 picoseconds.
		Weight::from_parts(15_522_018, 0)
			.saturating_add(Weight::from_parts(0, 6107))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX TradingPairs (r:1 w:1)
	/// Proof Skipped: OCEX TradingPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 100000]`.
	fn update_trading_pair(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `3885`
		// Minimum execution time: 18_607_000 picoseconds.
		Weight::from_parts(19_545_046, 0)
			.saturating_add(Weight::from_parts(0, 3885))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX AllowlistedToken (r:1 w:0)
	/// Proof Skipped: OCEX AllowlistedToken (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Accounts (r:1 w:0)
	/// Proof Skipped: OCEX Accounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(222), added: 2697, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:1)
	/// Proof: Assets Account (max_values: None, max_size: Some(146), added: 2621, mode: MaxEncodedLen)
	/// Storage: OCEX TotalAssets (r:1 w:1)
	/// Proof Skipped: OCEX TotalAssets (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 255]`.
	fn deposit(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `740`
		//  Estimated: `6232`
		// Minimum execution time: 38_715_000 picoseconds.
		Weight::from_parts(40_085_326, 0)
			.saturating_add(Weight::from_parts(0, 6232))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Accounts (r:1 w:1)
	/// Proof Skipped: OCEX Accounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 255]`.
	fn remove_proxy_account(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `429`
		//  Estimated: `3894`
		// Minimum execution time: 16_406_000 picoseconds.
		Weight::from_parts(17_226_053, 0)
			.saturating_add(Weight::from_parts(0, 3894))
			// Standard Error: 15
			.saturating_add(Weight::from_parts(110, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX SnapshotNonce (r:1 w:1)
	/// Proof Skipped: OCEX SnapshotNonce (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX UnprocessedSnapshots (r:1 w:0)
	/// Proof Skipped: OCEX UnprocessedSnapshots (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX Authorities (r:1 w:0)
	/// Proof Skipped: OCEX Authorities (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX OnChainEvents (r:1 w:1)
	/// Proof Skipped: OCEX OnChainEvents (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX Withdrawals (r:0 w:1)
	/// Proof Skipped: OCEX Withdrawals (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX Snapshots (r:0 w:1)
	/// Proof Skipped: OCEX Snapshots (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX FeesCollected (r:0 w:1)
	/// Proof Skipped: OCEX FeesCollected (max_values: None, max_size: None, mode: Measured)
	fn submit_snapshot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `269`
		//  Estimated: `3734`
		// Minimum execution time: 20_580_000 picoseconds.
		Weight::from_parts(21_126_000, 0)
			.saturating_add(Weight::from_parts(0, 3734))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: OCEX FeesCollected (r:1 w:1)
	/// Proof Skipped: OCEX FeesCollected (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 255]`.
	fn collect_fees(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200`
		//  Estimated: `3665`
		// Minimum execution time: 9_321_000 picoseconds.
		Weight::from_parts(9_892_491, 0)
			.saturating_add(Weight::from_parts(0, 3665))
			// Standard Error: 9
			.saturating_add(Weight::from_parts(72, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// Storage: OCEX ExchangeState (r:0 w:1)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 100000]`.
	fn set_exchange_state(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167`
		//  Estimated: `3632`
		// Minimum execution time: 9_472_000 picoseconds.
		Weight::from_parts(10_047_006, 0)
			.saturating_add(Weight::from_parts(0, 3632))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: OCEX ExchangeState (r:1 w:0)
	/// Proof Skipped: OCEX ExchangeState (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OCEX IngressMessages (r:1 w:1)
	/// Proof Skipped: OCEX IngressMessages (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 255]`.
	fn set_balances(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3612`
		// Minimum execution time: 5_689_000 picoseconds.
		Weight::from_parts(6_148_190, 0)
			.saturating_add(Weight::from_parts(0, 3612))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(23, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: OCEX Withdrawals (r:1 w:1)
	/// Proof Skipped: OCEX Withdrawals (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(222), added: 2697, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:1)
	/// Proof: Assets Account (max_values: None, max_size: Some(146), added: 2621, mode: MaxEncodedLen)
	/// Storage: OCEX OnChainEvents (r:1 w:1)
	/// Proof Skipped: OCEX OnChainEvents (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 255]`.
	fn claim_withdraw(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `771`
		//  Estimated: `6232`
		// Minimum execution time: 33_987_000 picoseconds.
		Weight::from_parts(35_174_800, 0)
			.saturating_add(Weight::from_parts(0, 6232))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: OCEX AllowlistedToken (r:1 w:1)
	/// Proof Skipped: OCEX AllowlistedToken (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 65000]`.
	fn allowlist_token(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167`
		//  Estimated: `1652`
		// Minimum execution time: 8_826_000 picoseconds.
		Weight::from_parts(9_338_204, 0)
			.saturating_add(Weight::from_parts(0, 1652))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: OCEX AllowlistedToken (r:1 w:1)
	/// Proof Skipped: OCEX AllowlistedToken (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 65000]`.
	fn remove_allowlisted_token(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `1690`
		// Minimum execution time: 10_079_000 picoseconds.
		Weight::from_parts(10_642_563, 0)
			.saturating_add(Weight::from_parts(0, 1690))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: OCEX SnapshotNonce (r:0 w:1)
	/// Proof Skipped: OCEX SnapshotNonce (max_values: Some(1), max_size: None, mode: Measured)
	fn set_snapshot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_319_000 picoseconds.
		Weight::from_parts(2_492_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: OCEX PendingWithdrawalsAllowedPerSnapshot (r:0 w:1)
	/// Proof Skipped: OCEX PendingWithdrawalsAllowedPerSnapshot (max_values: Some(1), max_size: None, mode: Measured)
	fn change_pending_withdrawal_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_214_000 picoseconds.
		Weight::from_parts(2_388_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: OCEX SnapshotIntervalBlock (r:0 w:1)
	/// Proof Skipped: OCEX SnapshotIntervalBlock (max_values: Some(1), max_size: None, mode: Measured)
	fn change_snapshot_interval_block() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_229_000 picoseconds.
		Weight::from_parts(2_382_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: OCEX OrderbookOperatorPublicKey (r:0 w:1)
	/// Proof Skipped: OCEX OrderbookOperatorPublicKey (max_values: Some(1), max_size: None, mode: Measured)
	fn whitelist_orderbook_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_617_000 picoseconds.
		Weight::from_parts(5_963_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
