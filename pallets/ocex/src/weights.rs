
//! Autogenerated weights for `pallet_ocex_lmp`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-20, STEPS: `10`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// pallet-ocex-lmp
// --steps
// 10
// --repeat
// 20
// --extrinsic
// *
// --output
// ocex_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use crate::OcexWeightInfo;

/// Weight functions for `pallet_ocex_lmp`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> OcexWeightInfo for WeightInfo<T> {
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `b` is `[0, 50000]`.
	fn register_main_account(_b: u32, ) -> Weight {
		(18_996_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 255]`.
	fn add_proxy_account(x: u32, ) -> Weight {
		(21_717_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[1, 50000]`.
	fn close_trading_pair(_x: u32, ) -> Weight {
		(21_421_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn open_trading_pair(_x: u32, ) -> Weight {
		(21_610_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:2 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn register_trading_pair(_x: u32, ) -> Weight {
		(21_718_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn update_trading_pair(_x: u32, ) -> Weight {
		(23_069_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX AllowlistedToken (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: OCEX TotalAssets (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[1, 255]`.
	fn deposit(_x: u32, ) -> Weight {
		(54_371_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[1, 255]`.
	fn remove_proxy_account(x: u32, ) -> Weight {
		(21_059_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX RegisteredEnclaves (r:1 w:0)
	// Storage: OCEX AllowlistedEnclaves (r:1 w:0)
	// Storage: OCEX SnapshotNonce (r:1 w:1)
	// Storage: OCEX OnChainEvents (r:1 w:1)
	// Storage: OCEX Withdrawals (r:0 w:1)
	// Storage: OCEX Snapshots (r:0 w:1)
	// Storage: OCEX FeesCollected (r:0 w:1)
	fn submit_snapshot() -> Weight {
		(71_755_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: OCEX RegisteredEnclaves (r:0 w:1)
	/// The range of component `x` is `[0, 255]`.
	fn insert_enclave(_x: u32, ) -> Weight {
		(5_197_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OCEX FeesCollected (r:1 w:1)
	/// The range of component `x` is `[0, 255]`.
	fn collect_fees(_x: u32, ) -> Weight {
		(13_278_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OCEX IngressMessages (r:1 w:1)
	// Storage: OCEX ExchangeState (r:0 w:1)
	fn shutdown() -> Weight {
		(5_314_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX IngressMessages (r:1 w:1)
	// Storage: OCEX ExchangeState (r:0 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn set_exchange_state(_x: u32, ) -> Weight {
		(13_738_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OCEX Withdrawals (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: OCEX OnChainEvents (r:1 w:1)
	/// The range of component `x` is `[1, 255]`.
	fn claim_withdraw(_x: u32, ) -> Weight {
		(48_766_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: OCEX CertificateValidity (r:1 w:0)
	// Storage: OCEX RegisteredEnclaves (r:1 w:1)
	/// The range of component `x` is `[0, 65000]`.
	fn register_enclave(_x: u32, ) -> Weight {
		(94_430_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OCEX AllowlistedToken (r:1 w:1)
	/// The range of component `x` is `[0, 65000]`.
	fn allowlist_token(_x: u32, ) -> Weight {
		(13_442_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OCEX AllowlistedToken (r:1 w:1)
	/// The range of component `x` is `[0, 65000]`.
	fn remove_allowlisted_token(_x: u32, ) -> Weight {
		(13_623_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OCEX AllowlistedEnclaves (r:0 w:1)
	/// The range of component `x` is `[0, 255]`.
	fn allowlist_enclave(_x: u32, ) -> Weight {
		(12_035_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
