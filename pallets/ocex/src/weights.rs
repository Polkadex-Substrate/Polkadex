// This file is part of Polkadex.
//
// Copyright (c) 2023 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_ocex_lmp`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-07, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./polkadex-node
// benchmark
// pallet
// --pallet
// pallet_ocex_lmp
// --steps
// 100
// --repeat
// 200
// --extrinsic
// *
// --output
// ocex_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_ocex_lmp`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> super::OcexWeightInfo for WeightInfo<T> {
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `b` is `[0, 50000]`.
	fn register_main_account(_b: u32, ) -> Weight {
		// Minimum execution time: 21_800 nanoseconds.
		Weight::from_ref_time(22_752_392)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 255]`.
	fn add_proxy_account(_x: u32, ) -> Weight {
		// Minimum execution time: 26_471 nanoseconds.
		Weight::from_ref_time(27_475_644)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[1, 50000]`.
	fn close_trading_pair(_x: u32, ) -> Weight {
		// Minimum execution time: 25_564 nanoseconds.
		Weight::from_ref_time(26_606_034)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn open_trading_pair(_x: u32, ) -> Weight {
		// Minimum execution time: 25_424 nanoseconds.
		Weight::from_ref_time(26_501_974)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:2 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn register_trading_pair(_x: u32, ) -> Weight {
		// Minimum execution time: 23_555 nanoseconds.
		Weight::from_ref_time(24_510_983)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX TradingPairs (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn update_trading_pair(_x: u32, ) -> Weight {
		// Minimum execution time: 27_826 nanoseconds.
		Weight::from_ref_time(28_782_396)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX AllowlistedToken (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: OCEX TotalAssets (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[1, 255]`.
	fn deposit(_x: u32, ) -> Weight {
		// Minimum execution time: 61_954 nanoseconds.
		Weight::from_ref_time(63_987_215)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX Accounts (r:1 w:1)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[1, 255]`.
	fn remove_proxy_account(_x: u32, ) -> Weight {
		// Minimum execution time: 25_923 nanoseconds.
		Weight::from_ref_time(26_990_441)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX SnapshotNonce (r:1 w:1)
	// Storage: OCEX UnprocessedSnapshots (r:1 w:0)
	// Storage: OCEX Authorities (r:1 w:0)
	// Storage: OCEX OnChainEvents (r:1 w:1)
	// Storage: OCEX Withdrawals (r:0 w:1)
	// Storage: OCEX Snapshots (r:0 w:1)
	// Storage: OCEX PendingSnapshotFromPreviousSet (r:0 w:1)
	// Storage: OCEX FeesCollected (r:0 w:1)
	fn submit_snapshot() -> Weight {
		// Minimum execution time: 196_567 nanoseconds.
		Weight::from_ref_time(198_956_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: OCEX FeesCollected (r:1 w:1)
	/// The range of component `x` is `[0, 255]`.
	fn collect_fees(x: u32, ) -> Weight {
		// Minimum execution time: 18_782 nanoseconds.
		Weight::from_ref_time(19_674_049)
			// Standard Error: 16
			.saturating_add(Weight::from_ref_time(235).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: OCEX IngressMessages (r:1 w:1)
	// Storage: OCEX ExchangeState (r:0 w:1)
	/// The range of component `x` is `[0, 100000]`.
	fn set_exchange_state(_x: u32, ) -> Weight {
		// Minimum execution time: 17_599 nanoseconds.
		Weight::from_ref_time(18_491_437)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: OCEX ExchangeState (r:1 w:0)
	// Storage: OCEX IngressMessages (r:1 w:1)
	/// The range of component `x` is `[0, 255]`.
	fn set_balances(x: u32, ) -> Weight {
		// Minimum execution time: 7_385 nanoseconds.
		Weight::from_ref_time(7_812_496)
			// Standard Error: 9
			.saturating_add(Weight::from_ref_time(38).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: OCEX Withdrawals (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: OCEX OnChainEvents (r:1 w:1)
	/// The range of component `x` is `[1, 255]`.
	fn claim_withdraw(_x: u32, ) -> Weight {
		// Minimum execution time: 58_231 nanoseconds.
		Weight::from_ref_time(60_663_767)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: OCEX AllowlistedToken (r:1 w:1)
	/// The range of component `x` is `[0, 65000]`.
	fn allowlist_token(_x: u32, ) -> Weight {
		// Minimum execution time: 17_351 nanoseconds.
		Weight::from_ref_time(18_197_477)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: OCEX AllowlistedToken (r:1 w:1)
	/// The range of component `x` is `[0, 65000]`.
	fn remove_allowlisted_token(_x: u32, ) -> Weight {
		// Minimum execution time: 18_761 nanoseconds.
		Weight::from_ref_time(19_594_196)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: OCEX SnapshotNonce (r:0 w:1)
	fn set_snapshot() -> Weight {
		// Minimum execution time: 4_535 nanoseconds.
		Weight::from_ref_time(4_772_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: OCEX PendingWithdrawalsAllowedPerSnapshot (r:0 w:1)
	fn change_pending_withdrawal_limit() -> Weight {
		// Minimum execution time: 4_540 nanoseconds.
		Weight::from_ref_time(4_723_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: OCEX SnapshotIntervalBlock (r:0 w:1)
	fn change_snapshot_interval_block() -> Weight {
		// Minimum execution time: 4_520 nanoseconds.
		Weight::from_ref_time(4_741_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
