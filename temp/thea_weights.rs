
//! Autogenerated weights for `thea_executor`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-30, STEPS: `2`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Krishnas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/polkadex-node
// benchmark
// pallet
// --pallet
// thea-executor
// --steps
// 2
// --repeat
// 2
// --extrinsic
// *
// --output
// ./temp/thea_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `thea_executor`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> thea_executor::WeightInfo for WeightInfo<T> {
	/// Storage: `TheaExecutor::WithdrawalFees` (r:0 w:1)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn set_withdrawal_fee(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_500, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TheaExecutor::Metadata` (r:0 w:1)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn update_asset_metadata(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TheaExecutor::PendingWithdrawals` (r:1 w:1)
	/// Proof: `TheaExecutor::PendingWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::Metadata` (r:1 w:0)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::WithdrawalFees` (r:1 w:0)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// Storage: `TheaExecutor::RandomnessNonce` (r:1 w:1)
	/// Proof: `TheaExecutor::RandomnessNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:0 w:1)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn withdraw(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `755`
		//  Estimated: `6196`
		// Minimum execution time: 96_000_000 picoseconds.
		Weight::from_parts(97_500_500, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `TheaExecutor::PendingWithdrawals` (r:1 w:1)
	/// Proof: `TheaExecutor::PendingWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::Metadata` (r:1 w:0)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::WithdrawalFees` (r:1 w:0)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// Storage: `TheaExecutor::RandomnessNonce` (r:1 w:1)
	/// Proof: `TheaExecutor::RandomnessNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:0 w:1)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn parachain_withdraw(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `756`
		//  Estimated: `6196`
		// Minimum execution time: 93_000_000 picoseconds.
		Weight::from_parts(94_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `TheaExecutor::PendingWithdrawals` (r:1 w:1)
	/// Proof: `TheaExecutor::PendingWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::Metadata` (r:1 w:0)
	/// Proof: `TheaExecutor::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::WithdrawalFees` (r:1 w:0)
	/// Proof: `TheaExecutor::WithdrawalFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// Storage: `TheaExecutor::RandomnessNonce` (r:1 w:1)
	/// Proof: `TheaExecutor::RandomnessNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:0 w:1)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 1000]`.
	fn ethereum_withdraw(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `756`
		//  Estimated: `6196`
		// Minimum execution time: 93_000_000 picoseconds.
		Weight::from_parts(93_500_500, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `TheaExecutor::ReadyWithdrawals` (r:1 w:0)
	/// Proof: `TheaExecutor::ReadyWithdrawals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562`
		//  Estimated: `4027`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4027))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
