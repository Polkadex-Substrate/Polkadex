
//! Autogenerated weights for `pallet_membership`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-09-10, STEPS: `10`, REPEAT: 4, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/polkadex-node
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet=pallet_membership
// --extrinsic=*
// --steps
// 10
// --repeat
// 4
// --output=benchout/pallet_membership


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_membership.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::WeightInfo for WeightInfo<T> {
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Storage: Instance2Collective Proposals (r:1 w:0)
	// Storage: Instance2Collective Members (r:0 w:1)
	// Storage: Instance2Collective Prime (r:0 w:1)
	fn add_member(m: u32, ) -> Weight {
		(22_355_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((240_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Storage: Instance2Collective Proposals (r:1 w:0)
	// Storage: TechnicalMembership Prime (r:1 w:0)
	// Storage: Instance2Collective Members (r:0 w:1)
	// Storage: Instance2Collective Prime (r:0 w:1)
	fn remove_member(m: u32, ) -> Weight {
		(30_295_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((130_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Storage: Instance2Collective Proposals (r:1 w:0)
	// Storage: TechnicalMembership Prime (r:1 w:0)
	// Storage: Instance2Collective Members (r:0 w:1)
	// Storage: Instance2Collective Prime (r:0 w:1)
	fn swap_member(m: u32, ) -> Weight {
		(29_678_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((151_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Storage: Instance2Collective Proposals (r:1 w:0)
	// Storage: TechnicalMembership Prime (r:1 w:0)
	// Storage: Instance2Collective Members (r:0 w:1)
	// Storage: Instance2Collective Prime (r:0 w:1)
	fn reset_member(m: u32, ) -> Weight {
		(30_403_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((349_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Storage: Instance2Collective Proposals (r:1 w:0)
	// Storage: TechnicalMembership Prime (r:1 w:1)
	// Storage: Instance2Collective Members (r:0 w:1)
	// Storage: Instance2Collective Prime (r:0 w:1)
	fn change_key(m: u32, ) -> Weight {
		(31_583_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((152_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: TechnicalMembership Members (r:1 w:0)
	// Storage: TechnicalMembership Prime (r:0 w:1)
	// Storage: Instance2Collective Prime (r:0 w:1)
	fn set_prime(m: u32, ) -> Weight {
		(8_171_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((113_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: TechnicalMembership Prime (r:0 w:1)
	// Storage: Instance2Collective Prime (r:0 w:1)
	fn clear_prime(m: u32, ) -> Weight {
		(3_318_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}
